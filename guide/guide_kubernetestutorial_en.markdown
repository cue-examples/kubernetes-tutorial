<!--- Code generated by preguide from guide/en.markdown; DO NOT EDIT. --->


<pre><code>$ cue version
cue version v0.4.3-0.20220222111658-71e9d033c16e linux/arm64
</code></pre>

<pre><code>$ tree
.
`-- services
    |-- frontend
    |   |-- bartender
    |   |   `-- kube.yaml
    |   |-- breaddispatcher
    |   |   `-- kube.yaml
    |   |-- host
    |   |   `-- kube.yaml
    |   |-- maitred
    |   |   `-- kube.yaml
    |   |-- valeter
    |   |   `-- kube.yaml
    |   |-- waiter
    |   |   `-- kube.yaml
    |   `-- waterdispatcher
    |       `-- kube.yaml
    |-- infra
    |   |-- download
    |   |   `-- kube.yaml
    |   |-- etcd
    |   |   `-- kube.yaml
    |   |-- events
    |   |   `-- kube.yaml
    |   |-- tasks
    |   |   |-- kube.yaml
    |   |   `-- service.yaml
    |   |-- updater
    |   |   `-- kube.yaml
    |   `-- watcher
    |       |-- kube.yaml
    |       `-- service.yaml
    |-- kitchen
    |   |-- caller
    |   |   `-- kube.yaml
    |   |-- dishwasher
    |   |   `-- kube.yaml
    |   |-- expiditer
    |   |   `-- kube.yaml
    |   |-- headchef
    |   |   `-- kube.yaml
    |   |-- linecook
    |   |   `-- kube.yaml
    |   |-- pastrychef
    |   |   `-- kube.yaml
    |   `-- souschef
    |       `-- kube.yaml
    |-- mon
    |   |-- alertmanager
    |   |   |-- configmap.yaml
    |   |   `-- kube.yaml
    |   |-- grafana
    |   |   `-- kube.yaml
    |   |-- nodeexporter
    |   |   `-- kube.yaml
    |   `-- prometheus
    |       |-- configmap.yaml
    |       `-- kube.yaml
    `-- proxy
        |-- authproxy
        |   |-- configmap.yaml
        |   |-- kube.yaml
        |   `-- service.yaml
        |-- goget
        |   |-- kube.yaml
        |   `-- service.yaml
        `-- nginx
            |-- configmap.yaml
            |-- kube.yaml
            `-- service.yaml

33 directories, 36 files
</code></pre>

<pre><code>$ cue mod init
</code></pre>

<pre><code>$ go mod init example.com
go: creating new go.mod: module example.com
go: to add module requirements and sums:
	go mod tidy
</code></pre>

<pre><code>$ cd services
</code></pre>

<pre><code>$ cue import ./... -p kube
path, list, or files flag needed to handle multiple objects in file ./services/frontend/bartender/kube.yaml
</code></pre>

<pre><code>$ cue import ./... -p kube -l &#39;strings.ToCamel(kind)&#39; -l metadata.name -f
</code></pre>

<pre><code>$ tree
.
|-- frontend
|   |-- bartender
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- breaddispatcher
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- host
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- maitred
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- valeter
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- waiter
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   `-- waterdispatcher
|       |-- kube.cue
|       `-- kube.yaml
|-- infra
|   |-- download
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- etcd
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- events
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- tasks
|   |   |-- kube.cue
|   |   |-- kube.yaml
|   |   |-- service.cue
|   |   `-- service.yaml
|   |-- updater
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   `-- watcher
|       |-- kube.cue
|       |-- kube.yaml
|       |-- service.cue
|       `-- service.yaml
|-- kitchen
|   |-- caller
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- dishwasher
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- expiditer
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- headchef
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- linecook
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- pastrychef
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   `-- souschef
|       |-- kube.cue
|       `-- kube.yaml
|-- mon
|   |-- alertmanager
|   |   |-- configmap.cue
|   |   |-- configmap.yaml
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- grafana
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   |-- nodeexporter
|   |   |-- kube.cue
|   |   `-- kube.yaml
|   `-- prometheus
|       |-- configmap.cue
|       |-- configmap.yaml
|       |-- kube.cue
|       `-- kube.yaml
`-- proxy
    |-- authproxy
    |   |-- configmap.cue
    |   |-- configmap.yaml
    |   |-- kube.cue
    |   |-- kube.yaml
    |   |-- service.cue
    |   `-- service.yaml
    |-- goget
    |   |-- kube.cue
    |   |-- kube.yaml
    |   |-- service.cue
    |   `-- service.yaml
    `-- nginx
        |-- configmap.cue
        |-- configmap.yaml
        |-- kube.cue
        |-- kube.yaml
        |-- service.cue
        `-- service.yaml

32 directories, 72 files
</code></pre>

<pre><code>$ cat mon/prometheus/configmap.cue
package kube

configMap: prometheus: &#123;
	apiVersion: &#34;v1&#34;
	kind:       &#34;ConfigMap&#34;
	metadata: name: &#34;prometheus&#34;
	data: &#123;
		&#34;alert.rules&#34;: &#34;&#34;&#34;
			groups:
			- name: rules.yaml
			  rules:
			  - alert: InstanceDown
			    expr: up == 0
			    for: 30s
			    labels:
			      severity: page
			    annotations:
			      description: &#39;&#123;&#123;$labels.app&#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for
			        more than 30 seconds.&#39;
			      summary: Instance &#123;&#123;$labels.app&#125;&#125; down
			  - alert: InsufficientPeers
			    expr: count(up&#123;job=\&#34;etcd\&#34;&#125; == 0) &gt; (count(up&#123;job=\&#34;etcd\&#34;&#125;) / 2 - 1)
			    for: 3m
			    labels:
			      severity: page
			    annotations:
			      description: If one more etcd peer goes down the cluster will be unavailable
			      summary: etcd cluster small
			  - alert: EtcdNoMaster
			    expr: sum(etcd_server_has_leader&#123;app=\&#34;etcd\&#34;&#125;) == 0
			    for: 1s
			    labels:
			      severity: page
			    annotations:
			      summary: No ETCD master elected.
			  - alert: PodRestart
			    expr: (max_over_time(pod_container_status_restarts_total[5m]) - min_over_time(pod_container_status_restarts_total[5m])) &gt; 2
			    for: 1m
			    labels:
			      severity: page
			    annotations:
			      description: &#39;&#123;&#123;$labels.app&#125;&#125; &#123;&#123; $labels.container &#125;&#125; resturted &#123;&#123; $value &#125;&#125; times in 5m.&#39;
			      summary: Pod for &#123;&#123;$labels.container&#125;&#125; restarts too often
			&#34;&#34;&#34;

		&#34;prometheus.yml&#34;: &#34;&#34;&#34;
			global:
			  scrape_interval: 15s
			rule_files:
			  - /etc/prometheus/alert.rules
			alerting:
			  alertmanagers:
			  - scheme: http
			    static_configs:
			    - targets:
			      - &#39;alertmanager:9093&#39;
			scrape_configs:
			- job_name: &#39;kubernetes-apiservers&#39;

			  kubernetes_sd_configs:
			  - role: endpoints

			  # Default to scraping over https. If required, just disable this or change to
			  # `http`.
			  scheme: https

			  # This TLS &amp; bearer token file config is used to connect to the actual scrape
			  # endpoints for cluster components. This is separate to discovery auth
			  # configuration because discovery &amp; scraping are two separate concerns in
			  # Prometheus. The discovery auth config is automatic if Prometheus runs inside
			  # the cluster. Otherwise, more config options have to be provided within the
			  # &lt;kubernetes_sd_config&gt;.
			  tls_config:
			    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
			    # If your node certificates are self-signed or use a different CA to the
			    # master CA, then disable certificate verification below. Note that
			    # certificate verification is an integral part of a secure infrastructure
			    # so this should only be disabled in a controlled environment. You can
			    # disable certificate verification by uncommenting the line below.
			    #
			    # insecure_skip_verify: true
			  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

			  # Keep only the default/kubernetes service endpoints for the https port. This
			  # will add targets for each API server which Kubernetes adds an endpoint to
			  # the default/kubernetes service.
			  relabel_configs:
			  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
			    action: keep
			    regex: default;kubernetes;https

			# Scrape config for nodes (kubelet).
			#
			# Rather than connecting directly to the node, the scrape is proxied though the
			# Kubernetes apiserver.  This means it will work if Prometheus is running out of
			# cluster, or can&#39;t connect to nodes for some other reason (e.g. because of
			# firewalling).
			- job_name: &#39;kubernetes-nodes&#39;

			  # Default to scraping over https. If required, just disable this or change to
			  # `http`.
			  scheme: https

			  # This TLS &amp; bearer token file config is used to connect to the actual scrape
			  # endpoints for cluster components. This is separate to discovery auth
			  # configuration because discovery &amp; scraping are two separate concerns in
			  # Prometheus. The discovery auth config is automatic if Prometheus runs inside
			  # the cluster. Otherwise, more config options have to be provided within the
			  # &lt;kubernetes_sd_config&gt;.
			  tls_config:
			    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
			  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

			  kubernetes_sd_configs:
			  - role: node

			  relabel_configs:
			  - action: labelmap
			    regex: __meta_kubernetes_node_label_(.+)
			  - target_label: __address__
			    replacement: kubernetes.default.svc:443
			  - source_labels: [__meta_kubernetes_node_name]
			    regex: (.+)
			    target_label: __metrics_path__
			    replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics

			# Scrape config for Kubelet cAdvisor.
			#
			# This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
			# (those whose names begin with &#39;container_&#39;) have been removed from the
			# Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
			# retrieve those metrics.
			#
			# In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
			# HTTP endpoint; use \&#34;replacement: /api/v1/nodes/$&#123;1&#125;:4194/proxy/metrics\&#34;
			# in that case (and ensure cAdvisor&#39;s HTTP server hasn&#39;t been disabled with
			# the --cadvisor-port=0 Kubelet flag).
			#
			# This job is not necessary and should be removed in Kubernetes 1.6 and
			# earlier versions, or it will cause the metrics to be scraped twice.
			- job_name: &#39;kubernetes-cadvisor&#39;

			  # Default to scraping over https. If required, just disable this or change to
			  # `http`.
			  scheme: https

			  # This TLS &amp; bearer token file config is used to connect to the actual scrape
			  # endpoints for cluster components. This is separate to discovery auth
			  # configuration because discovery &amp; scraping are two separate concerns in
			  # Prometheus. The discovery auth config is automatic if Prometheus runs inside
			  # the cluster. Otherwise, more config options have to be provided within the
			  # &lt;kubernetes_sd_config&gt;.
			  tls_config:
			    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
			  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

			  kubernetes_sd_configs:
			  - role: node

			  relabel_configs:
			  - action: labelmap
			    regex: __meta_kubernetes_node_label_(.+)
			  - target_label: __address__
			    replacement: kubernetes.default.svc:443
			  - source_labels: [__meta_kubernetes_node_name]
			    regex: (.+)
			    target_label: __metrics_path__
			    replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor

			# Scrape config for service endpoints.
			#
			# The relabeling allows the actual service scrape endpoint to be configured
			# via the following annotations:
			#
			# * `prometheus.io/scrape`: Only scrape services that have a value of `true`
			# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
			# to set this to `https` &amp; most likely set the `tls_config` of the scrape config.
			# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
			# * `prometheus.io/port`: If the metrics are exposed on a different port to the
			# service then set this appropriately.
			- job_name: &#39;kubernetes-service-endpoints&#39;

			  kubernetes_sd_configs:
			  - role: endpoints

			  relabel_configs:
			  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
			    action: keep
			    regex: true
			  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
			    action: replace
			    target_label: __scheme__
			    regex: (https?)
			  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
			    action: replace
			    target_label: __metrics_path__
			    regex: (.+)
			  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
			    action: replace
			    target_label: __address__
			    regex: ([^:]+)(?::\\d+)?;(\\d+)
			    replacement: $1:$2
			  - action: labelmap
			    regex: __meta_kubernetes_service_label_(.+)
			  - source_labels: [__meta_kubernetes_namespace]
			    action: replace
			    target_label: kubernetes_namespace
			  - source_labels: [__meta_kubernetes_service_name]
			    action: replace
			    target_label: kubernetes_name

			# Example scrape config for probing services via the Blackbox Exporter.
			#
			# The relabeling allows the actual service scrape endpoint to be configured
			# via the following annotations:
			#
			# * `prometheus.io/probe`: Only probe services that have a value of `true`
			- job_name: &#39;kubernetes-services&#39;

			  metrics_path: /probe
			  params:
			    module: [http_2xx]

			  kubernetes_sd_configs:
			  - role: service

			  relabel_configs:
			  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
			    action: keep
			    regex: true
			  - source_labels: [__address__]
			    target_label: __param_target
			  - target_label: __address__
			    replacement: blackbox-exporter.example.com:9115
			  - source_labels: [__param_target]
			    target_label: app
			  - action: labelmap
			    regex: __meta_kubernetes_service_label_(.+)
			  - source_labels: [__meta_kubernetes_namespace]
			    target_label: kubernetes_namespace
			  - source_labels: [__meta_kubernetes_service_name]
			    target_label: kubernetes_name

			# Example scrape config for probing ingresses via the Blackbox Exporter.
			#
			# The relabeling allows the actual ingress scrape endpoint to be configured
			# via the following annotations:
			#
			# * `prometheus.io/probe`: Only probe services that have a value of `true`
			- job_name: &#39;kubernetes-ingresses&#39;

			  metrics_path: /probe
			  params:
			    module: [http_2xx]

			  kubernetes_sd_configs:
			    - role: ingress

			  relabel_configs:
			    - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
			      action: keep
			      regex: true
			    - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
			      regex: (.+);(.+);(.+)
			      replacement: $&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;
			      target_label: __param_target
			    - target_label: __address__
			      replacement: blackbox-exporter.example.com:9115
			    - source_labels: [__param_target]
			      target_label: app
			    - action: labelmap
			      regex: __meta_kubernetes_ingress_label_(.+)
			    - source_labels: [__meta_kubernetes_namespace]
			      target_label: kubernetes_namespace
			    - source_labels: [__meta_kubernetes_ingress_name]
			      target_label: kubernetes_name

			# Example scrape config for pods
			#
			# The relabeling allows the actual pod scrape endpoint to be configured via the
			# following annotations:
			#
			# * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
			# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
			# * `prometheus.io/port`: Scrape the pod on the indicated port instead of the
			# pod&#39;s declared ports (default is a port-free target if none are declared).
			- job_name: &#39;kubernetes-pods&#39;

			  kubernetes_sd_configs:
			  - role: pod

			  relabel_configs:
			  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
			    action: keep
			    regex: true
			  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
			    action: replace
			    target_label: __metrics_path__
			    regex: (.+)
			  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
			    action: replace
			    regex: ([^:]+)(?::\\d+)?;(\\d+)
			    replacement: $1:$2
			    target_label: __address__
			  - action: labelmap
			    regex: __meta_kubernetes_pod_label_(.+)
			  - source_labels: [__meta_kubernetes_namespace]
			    action: replace
			    target_label: kubernetes_namespace
			  - source_labels: [__meta_kubernetes_pod_name]
			    action: replace
			    target_label: kubernetes_pod_name
			&#34;&#34;&#34;
	&#125;
&#125;
</code></pre>

<pre><code>$ cue import ./... -p kube -l &#39;strings.ToCamel(kind)&#39; -l metadata.name -f -R
</code></pre>

<pre><code>$ cat mon/prometheus/configmap.cue
package kube

import yaml656e63 &#34;encoding/yaml&#34;

configMap: prometheus: &#123;
	apiVersion: &#34;v1&#34;
	kind:       &#34;ConfigMap&#34;
	metadata: name: &#34;prometheus&#34;
	data: &#123;
		&#34;alert.rules&#34;: yaml656e63.Marshal(_cue_alert_rules)
		let _cue_alert_rules = &#123;
			groups: [&#123;
				name: &#34;rules.yaml&#34;
				rules: [&#123;
					alert: &#34;InstanceDown&#34;
					expr:  &#34;up == 0&#34;
					for:   &#34;30s&#34;
					labels: severity: &#34;page&#34;
					annotations: &#123;
						description: &#34;&#123;&#123;$labels.app&#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for more than 30 seconds.&#34;

						summary: &#34;Instance &#123;&#123;$labels.app&#125;&#125; down&#34;
					&#125;
				&#125;, &#123;
					alert: &#34;InsufficientPeers&#34;
					expr:  &#34;count(up&#123;job=\&#34;etcd\&#34;&#125; == 0) &gt; (count(up&#123;job=\&#34;etcd\&#34;&#125;) / 2 - 1)&#34;
					for:   &#34;3m&#34;
					labels: severity: &#34;page&#34;
					annotations: &#123;
						description: &#34;If one more etcd peer goes down the cluster will be unavailable&#34;
						summary:     &#34;etcd cluster small&#34;
					&#125;
				&#125;, &#123;
					alert: &#34;EtcdNoMaster&#34;
					expr:  &#34;sum(etcd_server_has_leader&#123;app=\&#34;etcd\&#34;&#125;) == 0&#34;
					for:   &#34;1s&#34;
					labels: severity: &#34;page&#34;
					annotations: summary: &#34;No ETCD master elected.&#34;
				&#125;, &#123;
					alert: &#34;PodRestart&#34;
					expr:  &#34;(max_over_time(pod_container_status_restarts_total[5m]) - min_over_time(pod_container_status_restarts_total[5m])) &gt; 2&#34;
					for:   &#34;1m&#34;
					labels: severity: &#34;page&#34;
					annotations: &#123;
						description: &#34;&#123;&#123;$labels.app&#125;&#125; &#123;&#123; $labels.container &#125;&#125; resturted &#123;&#123; $value &#125;&#125; times in 5m.&#34;
						summary:     &#34;Pod for &#123;&#123;$labels.container&#125;&#125; restarts too often&#34;
					&#125;
				&#125;]
			&#125;]
		&#125;

		&#34;prometheus.yml&#34;: yaml656e63.Marshal(_cue_prometheus_yml)
		let _cue_prometheus_yml = &#123;
			global: scrape_interval: &#34;15s&#34;
			rule_files: [
				&#34;/etc/prometheus/alert.rules&#34;,
			]
			alerting: alertmanagers: [&#123;
				scheme: &#34;http&#34;
				static_configs: [&#123;
					targets: [
						&#34;alertmanager:9093&#34;,
					]
				&#125;]
			&#125;]
			scrape_configs: [&#123;
				job_name: &#34;kubernetes-apiservers&#34;

				kubernetes_sd_configs: [&#123;
					role: &#34;endpoints&#34;
				&#125;]

				// Default to scraping over https. If required, just disable this or change to
				// `http`.
				scheme: &#34;https&#34;

				// This TLS &amp; bearer token file config is used to connect to the actual scrape
				// endpoints for cluster components. This is separate to discovery auth
				// configuration because discovery &amp; scraping are two separate concerns in
				// Prometheus. The discovery auth config is automatic if Prometheus runs inside
				// the cluster. Otherwise, more config options have to be provided within the
				// &lt;kubernetes_sd_config&gt;.
				tls_config: &#123;
					ca_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&#34;
				&#125;
				// If your node certificates are self-signed or use a different CA to the
				// master CA, then disable certificate verification below. Note that
				// certificate verification is an integral part of a secure infrastructure
				// so this should only be disabled in a controlled environment. You can
				// disable certificate verification by uncommenting the line below.
				//
				// insecure_skip_verify: true
				bearer_token_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/token&#34;

				// Keep only the default/kubernetes service endpoints for the https port. This
				// will add targets for each API server which Kubernetes adds an endpoint to
				// the default/kubernetes service.
				relabel_configs: [&#123;
					source_labels: [&#34;__meta_kubernetes_namespace&#34;, &#34;__meta_kubernetes_service_name&#34;, &#34;__meta_kubernetes_endpoint_port_name&#34;]
					action: &#34;keep&#34;
					regex:  &#34;default;kubernetes;https&#34;
				&#125;]
			&#125;, &#123;
				// Scrape config for nodes (kubelet).
				//
				// Rather than connecting directly to the node, the scrape is proxied though the
				// Kubernetes apiserver.  This means it will work if Prometheus is running out of
				// cluster, or can&#39;t connect to nodes for some other reason (e.g. because of
				// firewalling).
				job_name: &#34;kubernetes-nodes&#34;

				// Default to scraping over https. If required, just disable this or change to
				// `http`.
				scheme: &#34;https&#34;

				// This TLS &amp; bearer token file config is used to connect to the actual scrape
				// endpoints for cluster components. This is separate to discovery auth
				// configuration because discovery &amp; scraping are two separate concerns in
				// Prometheus. The discovery auth config is automatic if Prometheus runs inside
				// the cluster. Otherwise, more config options have to be provided within the
				// &lt;kubernetes_sd_config&gt;.
				tls_config: &#123;
					ca_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&#34;
				&#125;
				bearer_token_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/token&#34;

				kubernetes_sd_configs: [&#123;
					role: &#34;node&#34;
				&#125;]

				relabel_configs: [&#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_node_label_(.+)&#34;
				&#125;, &#123;
					target_label: &#34;__address__&#34;
					replacement:  &#34;kubernetes.default.svc:443&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_node_name&#34;]
					regex:        &#34;(.+)&#34;
					target_label: &#34;__metrics_path__&#34;
					replacement:  &#34;/api/v1/nodes/$&#123;1&#125;/proxy/metrics&#34;
				&#125;]
			&#125;, &#123;
				// Scrape config for Kubelet cAdvisor.
				//
				// This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
				// (those whose names begin with &#39;container_&#39;) have been removed from the
				// Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
				// retrieve those metrics.
				//
				// In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
				// HTTP endpoint; use &#34;replacement: /api/v1/nodes/$&#123;1&#125;:4194/proxy/metrics&#34;
				// in that case (and ensure cAdvisor&#39;s HTTP server hasn&#39;t been disabled with
				// the --cadvisor-port=0 Kubelet flag).
				//
				// This job is not necessary and should be removed in Kubernetes 1.6 and
				// earlier versions, or it will cause the metrics to be scraped twice.
				job_name: &#34;kubernetes-cadvisor&#34;

				// Default to scraping over https. If required, just disable this or change to
				// `http`.
				scheme: &#34;https&#34;

				// This TLS &amp; bearer token file config is used to connect to the actual scrape
				// endpoints for cluster components. This is separate to discovery auth
				// configuration because discovery &amp; scraping are two separate concerns in
				// Prometheus. The discovery auth config is automatic if Prometheus runs inside
				// the cluster. Otherwise, more config options have to be provided within the
				// &lt;kubernetes_sd_config&gt;.
				tls_config: &#123;
					ca_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/ca.crt&#34;
				&#125;
				bearer_token_file: &#34;/var/run/secrets/kubernetes.io/serviceaccount/token&#34;

				kubernetes_sd_configs: [&#123;
					role: &#34;node&#34;
				&#125;]

				relabel_configs: [&#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_node_label_(.+)&#34;
				&#125;, &#123;
					target_label: &#34;__address__&#34;
					replacement:  &#34;kubernetes.default.svc:443&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_node_name&#34;]
					regex:        &#34;(.+)&#34;
					target_label: &#34;__metrics_path__&#34;
					replacement:  &#34;/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor&#34;
				&#125;]
			&#125;, &#123;
				// Scrape config for service endpoints.
				//
				// The relabeling allows the actual service scrape endpoint to be configured
				// via the following annotations:
				//
				// * `prometheus.io/scrape`: Only scrape services that have a value of `true`
				// * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
				// to set this to `https` &amp; most likely set the `tls_config` of the scrape config.
				// * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
				// * `prometheus.io/port`: If the metrics are exposed on a different port to the
				// service then set this appropriately.
				job_name: &#34;kubernetes-service-endpoints&#34;

				kubernetes_sd_configs: [&#123;
					role: &#34;endpoints&#34;
				&#125;]

				relabel_configs: [&#123;
					source_labels: [&#34;__meta_kubernetes_service_annotation_prometheus_io_scrape&#34;]
					action: &#34;keep&#34;
					regex:  true
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_service_annotation_prometheus_io_scheme&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;__scheme__&#34;
					regex:        &#34;(https?)&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_service_annotation_prometheus_io_path&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;__metrics_path__&#34;
					regex:        &#34;(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__address__&#34;, &#34;__meta_kubernetes_service_annotation_prometheus_io_port&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;__address__&#34;
					regex:        &#34;([^:]+)(?::\\d+)?;(\\d+)&#34;
					replacement:  &#34;$1:$2&#34;
				&#125;, &#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_service_label_(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_namespace&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;kubernetes_namespace&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_service_name&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;kubernetes_name&#34;
				&#125;]
			&#125;, &#123;
				// Example scrape config for probing services via the Blackbox Exporter.
				//
				// The relabeling allows the actual service scrape endpoint to be configured
				// via the following annotations:
				//
				// * `prometheus.io/probe`: Only probe services that have a value of `true`
				job_name: &#34;kubernetes-services&#34;

				metrics_path: &#34;/probe&#34;
				params: module: [&#34;http_2xx&#34;]

				kubernetes_sd_configs: [&#123;
					role: &#34;service&#34;
				&#125;]

				relabel_configs: [&#123;
					source_labels: [&#34;__meta_kubernetes_service_annotation_prometheus_io_probe&#34;]
					action: &#34;keep&#34;
					regex:  true
				&#125;, &#123;
					source_labels: [&#34;__address__&#34;]
					target_label: &#34;__param_target&#34;
				&#125;, &#123;
					target_label: &#34;__address__&#34;
					replacement:  &#34;blackbox-exporter.example.com:9115&#34;
				&#125;, &#123;
					source_labels: [&#34;__param_target&#34;]
					target_label: &#34;app&#34;
				&#125;, &#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_service_label_(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_namespace&#34;]
					target_label: &#34;kubernetes_namespace&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_service_name&#34;]
					target_label: &#34;kubernetes_name&#34;
				&#125;]
			&#125;, &#123;
				// Example scrape config for probing ingresses via the Blackbox Exporter.
				//
				// The relabeling allows the actual ingress scrape endpoint to be configured
				// via the following annotations:
				//
				// * `prometheus.io/probe`: Only probe services that have a value of `true`
				job_name: &#34;kubernetes-ingresses&#34;

				metrics_path: &#34;/probe&#34;
				params: module: [&#34;http_2xx&#34;]

				kubernetes_sd_configs: [&#123;
					role: &#34;ingress&#34;
				&#125;]

				relabel_configs: [&#123;
					source_labels: [&#34;__meta_kubernetes_ingress_annotation_prometheus_io_probe&#34;]
					action: &#34;keep&#34;
					regex:  true
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_ingress_scheme&#34;, &#34;__address__&#34;, &#34;__meta_kubernetes_ingress_path&#34;]
					regex:        &#34;(.+);(.+);(.+)&#34;
					replacement:  &#34;$&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;&#34;
					target_label: &#34;__param_target&#34;
				&#125;, &#123;
					target_label: &#34;__address__&#34;
					replacement:  &#34;blackbox-exporter.example.com:9115&#34;
				&#125;, &#123;
					source_labels: [&#34;__param_target&#34;]
					target_label: &#34;app&#34;
				&#125;, &#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_ingress_label_(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_namespace&#34;]
					target_label: &#34;kubernetes_namespace&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_ingress_name&#34;]
					target_label: &#34;kubernetes_name&#34;
				&#125;]
			&#125;, &#123;
				// Example scrape config for pods
				//
				// The relabeling allows the actual pod scrape endpoint to be configured via the
				// following annotations:
				//
				// * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
				// * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
				// * `prometheus.io/port`: Scrape the pod on the indicated port instead of the
				// pod&#39;s declared ports (default is a port-free target if none are declared).
				job_name: &#34;kubernetes-pods&#34;

				kubernetes_sd_configs: [&#123;
					role: &#34;pod&#34;
				&#125;]

				relabel_configs: [&#123;
					source_labels: [&#34;__meta_kubernetes_pod_annotation_prometheus_io_scrape&#34;]
					action: &#34;keep&#34;
					regex:  true
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_pod_annotation_prometheus_io_path&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;__metrics_path__&#34;
					regex:        &#34;(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__address__&#34;, &#34;__meta_kubernetes_pod_annotation_prometheus_io_port&#34;]
					action:       &#34;replace&#34;
					regex:        &#34;([^:]+)(?::\\d+)?;(\\d+)&#34;
					replacement:  &#34;$1:$2&#34;
					target_label: &#34;__address__&#34;
				&#125;, &#123;
					action: &#34;labelmap&#34;
					regex:  &#34;__meta_kubernetes_pod_label_(.+)&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_namespace&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;kubernetes_namespace&#34;
				&#125;, &#123;
					source_labels: [&#34;__meta_kubernetes_pod_name&#34;]
					action:       &#34;replace&#34;
					target_label: &#34;kubernetes_pod_name&#34;
				&#125;]
			&#125;]
		&#125;
	&#125;
&#125;
</code></pre>

<pre><code>$ cue eval ./mon/prometheus -e configMap.prometheus
apiVersion: &#34;v1&#34;
kind:       &#34;ConfigMap&#34;
metadata: &#123;
    name: &#34;prometheus&#34;
&#125;
data: &#123;
    &#34;alert.rules&#34;: &#34;&#34;&#34;
        groups:
          - name: rules.yaml
            rules:
              - alert: InstanceDown
                expr: up == 0
                for: 30s
                labels:
                  severity: page
                annotations:
                  description: &#39;&#123;&#123;$labels.app&#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; has been down for more than 30 seconds.&#39;
                  summary: Instance &#123;&#123;$labels.app&#125;&#125; down
              - alert: InsufficientPeers
                expr: count(up&#123;job=&#34;etcd&#34;&#125; == 0) &gt; (count(up&#123;job=&#34;etcd&#34;&#125;) / 2 - 1)
                for: 3m
                labels:
                  severity: page
                annotations:
                  description: If one more etcd peer goes down the cluster will be unavailable
                  summary: etcd cluster small
              - alert: EtcdNoMaster
                expr: sum(etcd_server_has_leader&#123;app=&#34;etcd&#34;&#125;) == 0
                for: 1s
                labels:
                  severity: page
                annotations:
                  summary: No ETCD master elected.
              - alert: PodRestart
                expr: (max_over_time(pod_container_status_restarts_total[5m]) - min_over_time(pod_container_status_restarts_total[5m])) &gt; 2
                for: 1m
                labels:
                  severity: page
                annotations:
                  description: &#39;&#123;&#123;$labels.app&#125;&#125; &#123;&#123; $labels.container &#125;&#125; resturted &#123;&#123; $value &#125;&#125; times in 5m.&#39;
                  summary: Pod for &#123;&#123;$labels.container&#125;&#125; restarts too often

        &#34;&#34;&#34;
    &#34;prometheus.yml&#34;: &#34;&#34;&#34;
        global:
          scrape_interval: 15s
        rule_files:
          - /etc/prometheus/alert.rules
        alerting:
          alertmanagers:
            - scheme: http
              static_configs:
                - targets:
                    - alertmanager:9093
        scrape_configs:
          - job_name: kubernetes-apiservers
            kubernetes_sd_configs:
              - role: endpoints
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_namespace
                  - __meta_kubernetes_service_name
                  - __meta_kubernetes_endpoint_port_name
                action: keep
                regex: default;kubernetes;https
          - job_name: kubernetes-nodes
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels:
                  - __meta_kubernetes_node_name
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics
          - job_name: kubernetes-cadvisor
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels:
                  - __meta_kubernetes_node_name
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor
          - job_name: kubernetes-service-endpoints
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_scrape
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_scheme
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_path
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels:
                  - __address__
                  - __meta_kubernetes_service_annotation_prometheus_io_port
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\\d+)?;(\\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                action: replace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                action: replace
                target_label: kubernetes_name
          - job_name: kubernetes-services
            metrics_path: /probe
            params:
              module:
                - http_2xx
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_service_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __address__
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter.example.com:9115
              - source_labels:
                  - __param_target
                target_label: app
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_service_name
                target_label: kubernetes_name
          - job_name: kubernetes-ingresses
            metrics_path: /probe
            params:
              module:
                - http_2xx
            kubernetes_sd_configs:
              - role: ingress
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_ingress_annotation_prometheus_io_probe
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_ingress_scheme
                  - __address__
                  - __meta_kubernetes_ingress_path
                regex: (.+);(.+);(.+)
                replacement: $&#123;1&#125;://$&#123;2&#125;$&#123;3&#125;
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter.example.com:9115
              - source_labels:
                  - __param_target
                target_label: app
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_ingress_name
                target_label: kubernetes_name
          - job_name: kubernetes-pods
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                action: keep
                regex: true
              - source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_path
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels:
                  - __address__
                  - __meta_kubernetes_pod_annotation_prometheus_io_port
                action: replace
                regex: ([^:]+)(?::\\d+)?;(\\d+)
                replacement: $1:$2
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels:
                  - __meta_kubernetes_namespace
                action: replace
                target_label: kubernetes_namespace
              - source_labels:
                  - __meta_kubernetes_pod_name
                action: replace
                target_label: kubernetes_pod_name

        &#34;&#34;&#34;
&#125;
</code></pre>

<pre><code>$ cue eval -c ./... &gt;snapshot
</code></pre>

<pre><code>$ cp frontend/breaddispatcher/kube.cue .
</code></pre>

```cue
// /workdir/services/kube.cue

package kube

service: [ID=_]: {
	apiVersion: "v1"
	kind:       "Service"
	metadata: {
		name: ID
		labels: {
			app:       ID     // by convention
			domain:    "prod" // always the same in the given files
			component: string // varies per directory
		}
	}
	spec: {
		// Any port has the following properties.
		ports: [...{
			port:     int
			protocol: *"TCP" | "UDP" // from the Kubernetes definition
			name:     string | *"client"
		}]
		selector: metadata.labels // we want those to be the same
	}
}

deployment: [ID=_]: {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	metadata: name: ID
	spec: {
		// 1 is the default, but we allow any number
		replicas: *1 | int
		template: {
			metadata: labels: {
				app:       ID
				domain:    "prod"
				component: string
			}
			// we always have one namesake container
			spec: containers: [{name: ID}]
		}
	}
}
```

<pre><code>$ cue eval -c ./... &gt;snapshot2
// /workdir/services/mon/alertmanager
deployment.alertmanager.spec.template.metadata.labels.component: incomplete value string:
    ./kube.cue:36:16
service.alertmanager.metadata.labels.component: incomplete value string:
    ./kube.cue:11:15
service.alertmanager.spec.selector.component: incomplete value string:
    ./kube.cue:11:15
// /workdir/services/mon/nodeexporter
service.&#34;node-exporter&#34;.metadata.labels.component: incomplete value string:
    ./kube.cue:11:15
service.&#34;node-exporter&#34;.spec.selector.component: incomplete value string:
    ./kube.cue:11:15
// /workdir/services/mon/prometheus
deployment.prometheus.spec.template.metadata.labels.component: incomplete value string:
    ./kube.cue:36:16
service.prometheus.metadata.labels.component: incomplete value string:
    ./kube.cue:11:15
service.prometheus.spec.selector.component: incomplete value string:
    ./kube.cue:11:15
// /workdir/services/proxy/authproxy
deployment.authproxy.spec.template.metadata.labels.component: incomplete value string:
    ./kube.cue:36:16
service.authproxy.metadata.labels.component: incomplete value string:
    ./kube.cue:11:15
service.authproxy.spec.selector.component: incomplete value string:
    ./kube.cue:11:15
</code></pre>

<pre><code>$ sed -i.bak &#39;s/component:.*string/component: #Component/&#39; kube.cue
$ rm kube.cue.bak
$ cat &lt;&lt;EOF &gt;&gt;kube.cue

#Component: string
EOF
$ ls -d */ | sed &#39;s/.$//&#39; | xargs -I DIR sh -c &#39;cd DIR; echo &#34;package kube

#Component: \&#34;DIR\&#34;
&#34; &gt; kube.cue; cd ..&#39;
$ cue fmt kube.cue */kube.cue
</code></pre>

<pre><code>$ cue eval -c ./... &gt;snapshot2
$ diff -wu snapshot snapshot2
--- snapshot	2022-02-22 17:04:33.883794333 +0000
+++ snapshot2	2022-02-22 17:04:35.555886481 +0000
@@ -1,3 +1,9 @@
+service: &#123;&#125;
+deployment: &#123;&#125;
+// ---
+service: &#123;&#125;
+deployment: &#123;&#125;
+// ---
 service: &#123;
     bartender: &#123;
         apiVersion: &#34;v1&#34;
@@ -208,6 +214,7 @@
             selector: &#123;
                 app:    &#34;maitred&#34;
                 domain: &#34;prod&#34;
+                component: &#34;frontend&#34;
             &#125;
         &#125;
     &#125;
@@ -270,6 +277,7 @@
             selector: &#123;
                 app:    &#34;valeter&#34;
                 domain: &#34;prod&#34;
+                component: &#34;frontend&#34;
             &#125;
         &#125;
     &#125;
@@ -330,6 +338,8 @@
             &#125;]
             selector: &#123;
                 app: &#34;waiter&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
             &#125;
         &#125;
     &#125;
@@ -432,6 +442,9 @@
     &#125;
 &#125;
 // ---
+service: &#123;&#125;
+deployment: &#123;&#125;
+// ---
 service: &#123;
     download: &#123;
         apiVersion: &#34;v1&#34;
@@ -454,6 +467,7 @@
             selector: &#123;
                 app:    &#34;download&#34;
                 domain: &#34;prod&#34;
+                component: &#34;infra&#34;
             &#125;
         &#125;
     &#125;
@@ -497,6 +511,7 @@
             name: &#34;etcd&#34;
             labels: &#123;
                 app:       &#34;etcd&#34;
+                domain:    &#34;prod&#34;
                 component: &#34;infra&#34;
             &#125;
         &#125;
@@ -515,10 +530,13 @@
             &#125;]
             selector: &#123;
                 app: &#34;etcd&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
             &#125;
         &#125;
     &#125;
 &#125;
+deployment: &#123;&#125;
 statefulSet: &#123;
     etcd: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -712,6 +730,35 @@
     &#125;
 &#125;
 // ---
+service: &#123;
+    tasks: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;Service&#34;
+        metadata: &#123;
+            name: &#34;tasks&#34;
+            labels: &#123;
+                app:       &#34;tasks&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        spec: &#123;
+            type:           &#34;LoadBalancer&#34;
+            loadBalancerIP: &#34;1.2.3.4&#34;
+            ports: [&#123;
+                port:       443
+                targetPort: 7443
+                protocol:   &#34;TCP&#34;
+                name:       &#34;http&#34;
+            &#125;]
+            selector: &#123;
+                app:       &#34;tasks&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
 deployment: &#123;
     tasks: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -729,6 +776,7 @@
                     &#125;
                     labels: &#123;
                         app:       &#34;tasks&#34;
+                        domain:    &#34;prod&#34;
                         component: &#34;infra&#34;
                     &#125;
                 &#125;
@@ -757,32 +805,6 @@
         &#125;
     &#125;
 &#125;
-service: &#123;
-    tasks: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;tasks&#34;
-            labels: &#123;
-                app:       &#34;tasks&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
-        spec: &#123;
-            type:           &#34;LoadBalancer&#34;
-            loadBalancerIP: &#34;1.2.3.4&#34;
-            ports: [&#123;
-                port:       443
-                targetPort: 7443
-                protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
-            &#125;]
-            selector: &#123;
-                app: &#34;tasks&#34;
-            &#125;
-        &#125;
-    &#125;
-&#125;
 // ---
 service: &#123;
     updater: &#123;
@@ -806,6 +828,7 @@
             selector: &#123;
                 app:    &#34;updater&#34;
                 domain: &#34;prod&#34;
+                component: &#34;infra&#34;
             &#125;
         &#125;
     &#125;
@@ -852,6 +875,35 @@
     &#125;
 &#125;
 // ---
+service: &#123;
+    watcher: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;Service&#34;
+        metadata: &#123;
+            name: &#34;watcher&#34;
+            labels: &#123;
+                app:       &#34;watcher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        spec: &#123;
+            type:           &#34;LoadBalancer&#34;
+            loadBalancerIP: &#34;1.2.3.4.&#34;
+            ports: [&#123;
+                port:       7788
+                targetPort: 7788
+                protocol:   &#34;TCP&#34;
+                name:       &#34;http&#34;
+            &#125;]
+            selector: &#123;
+                app:       &#34;watcher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
 deployment: &#123;
     watcher: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -894,33 +946,9 @@
         &#125;
     &#125;
 &#125;
-service: &#123;
-    watcher: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;watcher&#34;
-            labels: &#123;
-                app:       &#34;watcher&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
-        spec: &#123;
-            type:           &#34;LoadBalancer&#34;
-            loadBalancerIP: &#34;1.2.3.4.&#34;
-            ports: [&#123;
-                port:       7788
-                targetPort: 7788
-                protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
-            &#125;]
-            selector: &#123;
-                app: &#34;watcher&#34;
-            &#125;
-        &#125;
-    &#125;
-&#125;
+// ---
+service: &#123;&#125;
+deployment: &#123;&#125;
 // ---
 service: &#123;
     caller: &#123;
@@ -944,6 +972,7 @@
             selector: &#123;
                 app:    &#34;caller&#34;
                 domain: &#34;prod&#34;
+                component: &#34;kitchen&#34;
             &#125;
         &#125;
     &#125;
@@ -1500,6 +1529,8 @@
             &#125;]
             selector: &#123;
                 app: &#34;souschef&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
             &#125;
         &#125;
     &#125;
@@ -1543,33 +1574,9 @@
     &#125;
 &#125;
 // ---
-configMap: &#123;
-    alertmanager: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;ConfigMap&#34;
-        metadata: &#123;
-            name: &#34;alertmanager&#34;
-        &#125;
-        data: &#123;
-            &#34;alerts.yaml&#34;: &#34;&#34;&#34;
-                receivers:
-                  - name: pager
-                    slack_configs:
-                      - channel: &#39;#cloudmon&#39;
-                        text: |-
-                          &#123;&#123; range .Alerts &#125;&#125;&#123;&#123; .Annotations.description &#125;&#125;
-                          &#123;&#123; end &#125;&#125;
-                        send_resolved: true
-                route:
-                  receiver: pager
-                  group_by:
-                    - alertname
-                    - cluster
-
-                &#34;&#34;&#34;
-        &#125;
-    &#125;
-&#125;
+service: &#123;&#125;
+deployment: &#123;&#125;
+// ---
 service: &#123;
     alertmanager: &#123;
         apiVersion: &#34;v1&#34;
@@ -1582,6 +1589,8 @@
             name: &#34;alertmanager&#34;
             labels: &#123;
                 app: &#34;alertmanager&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
             &#125;
         &#125;
         spec: &#123;
@@ -1593,7 +1602,36 @@
             &#125;]
             selector: &#123;
                 app: &#34;alertmanager&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+    &#125;
             &#125;
+configMap: &#123;
+    alertmanager: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;ConfigMap&#34;
+        metadata: &#123;
+            name: &#34;alertmanager&#34;
+        &#125;
+        data: &#123;
+            &#34;alerts.yaml&#34;: &#34;&#34;&#34;
+                receivers:
+                  - name: pager
+                    slack_configs:
+                      - channel: &#39;#cloudmon&#39;
+                        text: |-
+                          &#123;&#123; range .Alerts &#125;&#125;&#123;&#123; .Annotations.description &#125;&#125;
+                          &#123;&#123; end &#125;&#125;
+                        send_resolved: true
+                route:
+                  receiver: pager
+                  group_by:
+                    - alertname
+                    - cluster
+
+                &#34;&#34;&#34;
         &#125;
     &#125;
 &#125;
@@ -1616,6 +1654,8 @@
                     name: &#34;alertmanager&#34;
                     labels: &#123;
                         app: &#34;alertmanager&#34;
+                        domain:    &#34;prod&#34;
+                        component: &#34;mon&#34;
                     &#125;
                 &#125;
                 spec: &#123;
@@ -1650,6 +1690,33 @@
     &#125;
 &#125;
 // ---
+service: &#123;
+    grafana: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;Service&#34;
+        metadata: &#123;
+            name: &#34;grafana&#34;
+            labels: &#123;
+                app:       &#34;grafana&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+        spec: &#123;
+            ports: [&#123;
+                name:       &#34;grafana&#34;
+                port:       3000
+                protocol:   &#34;TCP&#34;
+                targetPort: 3000
+            &#125;]
+            selector: &#123;
+                app:       &#34;grafana&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
 deployment: &#123;
     grafana: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -1667,6 +1734,7 @@
                 metadata: &#123;
                     labels: &#123;
                         app:       &#34;grafana&#34;
+                        domain:    &#34;prod&#34;
                         component: &#34;mon&#34;
                     &#125;
                 &#125;
@@ -1714,31 +1782,6 @@
         &#125;
     &#125;
 &#125;
-service: &#123;
-    grafana: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;grafana&#34;
-            labels: &#123;
-                app:       &#34;grafana&#34;
-                component: &#34;mon&#34;
-            &#125;
-        &#125;
-        spec: &#123;
-            ports: [&#123;
-                name:       &#34;grafana&#34;
-                port:       3000
-                protocol:   &#34;TCP&#34;
-                targetPort: 3000
-            &#125;]
-            selector: &#123;
-                app:       &#34;grafana&#34;
-                component: &#34;mon&#34;
-            &#125;
-        &#125;
-    &#125;
-&#125;
 // ---
 service: &#123;
     &#34;node-exporter&#34;: &#123;
@@ -1751,6 +1794,8 @@
             name: &#34;node-exporter&#34;
             labels: &#123;
                 app: &#34;node-exporter&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
             &#125;
         &#125;
         spec: &#123;
@@ -1763,10 +1808,13 @@
             &#125;]
             selector: &#123;
                 app: &#34;node-exporter&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
             &#125;
         &#125;
     &#125;
 &#125;
+deployment: &#123;&#125;
 daemonSet: &#123;
     &#34;node-exporter&#34;: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -1831,6 +1879,37 @@
     &#125;
 &#125;
 // ---
+service: &#123;
+    prometheus: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;Service&#34;
+        metadata: &#123;
+            annotations: &#123;
+                &#34;prometheus.io/scrape&#34;: &#34;true&#34;
+            &#125;
+            name: &#34;prometheus&#34;
+            labels: &#123;
+                app:       &#34;prometheus&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+        spec: &#123;
+            type: &#34;NodePort&#34;
+            ports: [&#123;
+                name:     &#34;main&#34;
+                port:     9090
+                protocol: &#34;TCP&#34;
+                nodePort: 30900
+            &#125;]
+            selector: &#123;
+                app:       &#34;prometheus&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
 configMap: &#123;
     prometheus: &#123;
         apiVersion: &#34;v1&#34;
@@ -2066,33 +2145,6 @@
         &#125;
     &#125;
 &#125;
-service: &#123;
-    prometheus: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            annotations: &#123;
-                &#34;prometheus.io/scrape&#34;: &#34;true&#34;
-            &#125;
-            name: &#34;prometheus&#34;
-            labels: &#123;
-                app: &#34;prometheus&#34;
-            &#125;
-        &#125;
-        spec: &#123;
-            type: &#34;NodePort&#34;
-            ports: [&#123;
-                name:     &#34;main&#34;
-                port:     9090
-                protocol: &#34;TCP&#34;
-                nodePort: 30900
-            &#125;]
-            selector: &#123;
-                app: &#34;prometheus&#34;
-            &#125;
-        &#125;
-    &#125;
-&#125;
 deployment: &#123;
     prometheus: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -2119,6 +2171,8 @@
                     name: &#34;prometheus&#34;
                     labels: &#123;
                         app: &#34;prometheus&#34;
+                        domain:    &#34;prod&#34;
+                        component: &#34;mon&#34;
                     &#125;
                     annotations: &#123;
                         &#34;prometheus.io.scrape&#34;: &#34;true&#34;
@@ -2150,6 +2204,77 @@
     &#125;
 &#125;
 // ---
+service: &#123;&#125;
+deployment: &#123;&#125;
+// ---
+service: &#123;
+    authproxy: &#123;
+        apiVersion: &#34;v1&#34;
+        kind:       &#34;Service&#34;
+        metadata: &#123;
+            name: &#34;authproxy&#34;
+            labels: &#123;
+                app:       &#34;authproxy&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+        spec: &#123;
+            ports: [&#123;
+                port:       4180
+                protocol:   &#34;TCP&#34;
+                targetPort: 4180
+                name:       &#34;client&#34;
+            &#125;]
+            selector: &#123;
+                app:       &#34;authproxy&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
+deployment: &#123;
+    authproxy: &#123;
+        apiVersion: &#34;apps/v1&#34;
+        kind:       &#34;Deployment&#34;
+        metadata: &#123;
+            name: &#34;authproxy&#34;
+        &#125;
+        spec: &#123;
+            replicas: 1
+            template: &#123;
+                metadata: &#123;
+                    labels: &#123;
+                        app:       &#34;authproxy&#34;
+                        domain:    &#34;prod&#34;
+                        component: &#34;proxy&#34;
+                    &#125;
+                &#125;
+                spec: &#123;
+                    containers: [&#123;
+                        image: &#34;skippy/oauth2_proxy:2.0.1&#34;
+                        ports: [&#123;
+                            containerPort: 4180
+                        &#125;]
+                        args: [&#34;--config=/etc/authproxy/authproxy.cfg&#34;]
+                        name: &#34;authproxy&#34;
+                        volumeMounts: [&#123;
+                            name:      &#34;config-volume&#34;
+                            mountPath: &#34;/etc/authproxy&#34;
+                        &#125;]
+                    &#125;]
+                    volumes: [&#123;
+                        name: &#34;config-volume&#34;
+                        configMap: &#123;
+                            name: &#34;authproxy&#34;
+                        &#125;
+                    &#125;]
+                &#125;
+            &#125;
+        &#125;
+    &#125;
+&#125;
 configMap: &#123;
     authproxy: &#123;
         apiVersion: &#34;v1&#34;
@@ -2214,71 +2339,36 @@
         &#125;
     &#125;
 &#125;
-deployment: &#123;
-    authproxy: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
-        metadata: &#123;
-            name: &#34;authproxy&#34;
-        &#125;
-        spec: &#123;
-            replicas: 1
-            template: &#123;
-                metadata: &#123;
-                    labels: &#123;
-                        app:    &#34;authproxy&#34;
-                        domain: &#34;prod&#34;
-                    &#125;
-                &#125;
-                spec: &#123;
-                    containers: [&#123;
-                        image: &#34;skippy/oauth2_proxy:2.0.1&#34;
-                        ports: [&#123;
-                            containerPort: 4180
-                        &#125;]
-                        args: [&#34;--config=/etc/authproxy/authproxy.cfg&#34;]
-                        name: &#34;authproxy&#34;
-                        volumeMounts: [&#123;
-                            name:      &#34;config-volume&#34;
-                            mountPath: &#34;/etc/authproxy&#34;
-                        &#125;]
-                    &#125;]
-                    volumes: [&#123;
-                        name: &#34;config-volume&#34;
-                        configMap: &#123;
-                            name: &#34;authproxy&#34;
-                        &#125;
-                    &#125;]
-                &#125;
-            &#125;
-        &#125;
-    &#125;
-&#125;
+// ---
 service: &#123;
-    authproxy: &#123;
+    goget: &#123;
         apiVersion: &#34;v1&#34;
         kind:       &#34;Service&#34;
         metadata: &#123;
-            name: &#34;authproxy&#34;
+            name: &#34;goget&#34;
             labels: &#123;
-                app:    &#34;authproxy&#34;
+                app:       &#34;goget&#34;
                 domain: &#34;prod&#34;
+                component: &#34;proxy&#34;
             &#125;
         &#125;
         spec: &#123;
+            type:           &#34;LoadBalancer&#34;
+            loadBalancerIP: &#34;1.3.5.7&#34;
             ports: [&#123;
-                port:       4180
+                port:       443
+                targetPort: 7443
                 protocol:   &#34;TCP&#34;
-                targetPort: 4180
-                name:       &#34;client&#34;
+                name:       &#34;https&#34;
             &#125;]
             selector: &#123;
-                app: &#34;authproxy&#34;
+                app:       &#34;goget&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
             &#125;
         &#125;
     &#125;
 &#125;
-// ---
 deployment: &#123;
     goget: &#123;
         apiVersion: &#34;apps/v1&#34;
@@ -2292,6 +2382,7 @@
                 metadata: &#123;
                     labels: &#123;
                         app:       &#34;goget&#34;
+                        domain:    &#34;prod&#34;
                         component: &#34;proxy&#34;
                     &#125;
                 &#125;
@@ -2318,33 +2409,91 @@
         &#125;
     &#125;
 &#125;
+// ---
 service: &#123;
-    goget: &#123;
+    nginx: &#123;
         apiVersion: &#34;v1&#34;
         kind:       &#34;Service&#34;
         metadata: &#123;
-            name: &#34;goget&#34;
+            name: &#34;nginx&#34;
             labels: &#123;
-                app:       &#34;goget&#34;
+                app:       &#34;nginx&#34;
+                domain:    &#34;prod&#34;
                 component: &#34;proxy&#34;
             &#125;
         &#125;
         spec: &#123;
             type:           &#34;LoadBalancer&#34;
-            loadBalancerIP: &#34;1.3.5.7&#34;
+            loadBalancerIP: &#34;1.3.4.5&#34;
             ports: [&#123;
+                port:       80
+                targetPort: 80
+                protocol:   &#34;TCP&#34;
+                name:       &#34;http&#34;
+            &#125;, &#123;
                 port:       443
-                targetPort: 7443
                 protocol:   &#34;TCP&#34;
                 name:       &#34;https&#34;
             &#125;]
             selector: &#123;
-                app: &#34;goget&#34;
+                app:       &#34;nginx&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+    &#125;
+&#125;
+deployment: &#123;
+    nginx: &#123;
+        apiVersion: &#34;apps/v1&#34;
+        kind:       &#34;Deployment&#34;
+        metadata: &#123;
+            name: &#34;nginx&#34;
+        &#125;
+        spec: &#123;
+            replicas: 1
+            template: &#123;
+                metadata: &#123;
+                    labels: &#123;
+                        app:       &#34;nginx&#34;
+                        domain:    &#34;prod&#34;
+                        component: &#34;proxy&#34;
+                    &#125;
+                &#125;
+                spec: &#123;
+                    volumes: [&#123;
+                        name: &#34;secret-volume&#34;
+                        secret: &#123;
+                            secretName: &#34;proxy-secrets&#34;
+                        &#125;
+                    &#125;, &#123;
+                        name: &#34;config-volume&#34;
+                        configMap: &#123;
+                            name: &#34;nginx&#34;
+                        &#125;
+                    &#125;]
+                    containers: [&#123;
+                        image: &#34;nginx:1.11.10-alpine&#34;
+                        ports: [&#123;
+                            containerPort: 80
+                        &#125;, &#123;
+                            containerPort: 443
+                        &#125;]
+                        name: &#34;nginx&#34;
+                        volumeMounts: [&#123;
+                            mountPath: &#34;/etc/ssl&#34;
+                            name:      &#34;secret-volume&#34;
+                        &#125;, &#123;
+                            name:      &#34;config-volume&#34;
+                            mountPath: &#34;/etc/nginx/nginx.conf&#34;
+                            subPath:   &#34;nginx.conf&#34;
+                        &#125;]
+                    &#125;]
+                &#125;
             &#125;
         &#125;
     &#125;
 &#125;
-// ---
 configMap: &#123;
     nginx: &#123;
         apiVersion: &#34;v1&#34;
@@ -2510,83 +2659,3 @@
         &#125;
     &#125;
 &#125;
-deployment: &#123;
-    nginx: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
-        metadata: &#123;
-            name: &#34;nginx&#34;
-        &#125;
-        spec: &#123;
-            replicas: 1
-            template: &#123;
-                metadata: &#123;
-                    labels: &#123;
-                        app:       &#34;nginx&#34;
-                        component: &#34;proxy&#34;
-                    &#125;
-                &#125;
-                spec: &#123;
-                    volumes: [&#123;
-                        name: &#34;secret-volume&#34;
-                        secret: &#123;
-                            secretName: &#34;proxy-secrets&#34;
-                        &#125;
-                    &#125;, &#123;
-                        name: &#34;config-volume&#34;
-                        configMap: &#123;
-                            name: &#34;nginx&#34;
-                        &#125;
-                    &#125;]
-                    containers: [&#123;
-                        image: &#34;nginx:1.11.10-alpine&#34;
-                        ports: [&#123;
-                            containerPort: 80
-                        &#125;, &#123;
-                            containerPort: 443
-                        &#125;]
-                        name: &#34;nginx&#34;
-                        volumeMounts: [&#123;
-                            mountPath: &#34;/etc/ssl&#34;
-                            name:      &#34;secret-volume&#34;
-                        &#125;, &#123;
-                            name:      &#34;config-volume&#34;
-                            mountPath: &#34;/etc/nginx/nginx.conf&#34;
-                            subPath:   &#34;nginx.conf&#34;
-                        &#125;]
-                    &#125;]
-                &#125;
-            &#125;
-        &#125;
-    &#125;
-&#125;
-service: &#123;
-    nginx: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;nginx&#34;
-            labels: &#123;
-                app:       &#34;nginx&#34;
-                component: &#34;proxy&#34;
-            &#125;
-        &#125;
-        spec: &#123;
-            type:           &#34;LoadBalancer&#34;
-            loadBalancerIP: &#34;1.3.4.5&#34;
-            ports: [&#123;
-                port:       80
-                targetPort: 80
-                protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
-            &#125;, &#123;
-                port:     443
-                protocol: &#34;TCP&#34;
-                name:     &#34;https&#34;
-            &#125;]
-            selector: &#123;
-                app: &#34;nginx&#34;
-            &#125;
-        &#125;
-    &#125;
-&#125;
</code></pre>

<pre><code>$ cp snapshot2 snapshot
</code></pre>

<pre><code>$ find . | grep kube.cue | xargs wc -l | tail -1
 1887 total
$ cue trim ./...
$ find . | grep kube.cue | xargs wc -l | tail -1
 1312 total
</code></pre>

<pre><code>$ cue eval -c ./... &gt;snapshot2
$ diff -wu snapshot snapshot2 | wc -l
0
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;kube.cue

daemonSet: [ID=_]: _spec &amp; &#123;
	 apiVersion: &#34;apps/v1&#34;
	 kind:       &#34;DaemonSet&#34;
	 _name:      ID
&#125;

statefulSet: [ID=_]: _spec &amp; &#123;
	 apiVersion: &#34;apps/v1&#34;
	 kind:       &#34;StatefulSet&#34;
	 _name:      ID
&#125;

deployment: [ID=_]: _spec &amp; &#123;
	 apiVersion: &#34;apps/v1&#34;
	 kind:       &#34;Deployment&#34;
	 _name:      ID
	 spec: replicas: *1 | int
&#125;

configMap: [ID=_]: &#123;
	 metadata: name: ID
	 metadata: labels: component: #Component
&#125;

_spec: &#123;
	 _name: string

	 metadata: name: _name
	 metadata: labels: component: #Component
	 spec: selector: &#123;&#125;
	 spec: template: &#123;
		  metadata: labels: &#123;
				app:       _name
				component: #Component
				domain:    &#34;prod&#34;
		  &#125;
		  spec: containers: [&#123;name: _name&#125;]
	 &#125;
&#125;
EOF
$ cue fmt
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;kube.cue

// Define the _export option and set the default to true
// for all ports defined in all containers.
_spec: spec: template: spec: containers: [...&#123;
	 ports: [...&#123;
		  _export: *true | false // include the port in the service
	 &#125;]
&#125;]

for x in [deployment, daemonSet, statefulSet] for k, v in x &#123;
	 service: &#34;\(k)&#34;: &#123;
		  spec: selector: v.spec.template.metadata.labels

		  spec: ports: [
				for c in v.spec.template.spec.containers
				for p in c.ports
				if p._export &#123;
					 let Port = p.containerPort // Port is an alias
					 port:       *Port | int
					 targetPort: *Port | int
				&#125;
		  ]
	 &#125;
&#125;
EOF
$ cue fmt
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;infra/events/kube.cue

deployment: events: spec: template: spec: containers: [&#123; ports: [&#123;_export: false&#125;, _] &#125;]
EOF
$ cat &lt;&lt;EOF &gt;&gt;infra/tasks/kube.cue

deployment: tasks: spec: template: spec: containers: [&#123; ports: [&#123;_export: false&#125;, _] &#125;]
EOF
$ cat &lt;&lt;EOF &gt;&gt;infra/watcher/kube.cue

deployment: watcher: spec: template: spec: containers: [&#123; ports: [&#123;_export: false&#125;, _] &#125;]
EOF
</code></pre>

<pre><code>$ cue trim ./...
$ find . | grep kube.cue | xargs wc -l | tail -1
 1242 total
</code></pre>

<pre><code>$ head frontend/breaddispatcher/kube.cue
package kube

deployment: breaddispatcher: &#123;
	spec: &#123;
		template: &#123;
			metadata: &#123;
				annotations: &#123;
					&#34;prometheus.io.scrape&#34;: &#34;true&#34;
					&#34;prometheus.io.port&#34;:   &#34;7080&#34;
				&#125;
$ cue trim ./... -s
$ head -7 frontend/breaddispatcher/kube.cue
package kube

deployment: breaddispatcher: spec: template: &#123;
	metadata: annotations: &#123;
		&#34;prometheus.io.scrape&#34;: &#34;true&#34;
		&#34;prometheus.io.port&#34;:   &#34;7080&#34;
	&#125;
$ find . | grep kube.cue | xargs wc -l | tail -1
 1090 total
</code></pre>

<pre><code>$ cue eval -c ./... &gt;snapshot2
$ cp snapshot2 snapshot
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;frontend/kube.cue

deployment: [string]: spec: template: &#123;
	 metadata: annotations: &#123;
		  &#34;prometheus.io.scrape&#34;: &#34;true&#34;
		  &#34;prometheus.io.port&#34;:   &#34;\(spec.containers[0].ports[0].containerPort)&#34;
	 &#125;
	 spec: containers: [&#123;
		  ports: [&#123;containerPort: *7080 | int&#125;] // 7080 is the default
	 &#125;]
&#125;
EOF
$ cue fmt ./frontend
$ cue eval -c ./... &gt;snapshot2
$ diff -wu snapshot snapshot2
--- snapshot	2022-02-22 17:04:43.112163848 +0000
+++ snapshot2	2022-02-22 17:04:44.108119140 +0000
@@ -188,6 +188,7 @@
                 metadata: &#123;
                     annotations: &#123;
                         &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                        &#34;prometheus.io.port&#34;:   &#34;7080&#34;
                     &#125;
                     labels: &#123;
                         app:       &#34;host&#34;
@@ -327,6 +328,7 @@
                 metadata: &#123;
                     annotations: &#123;
                         &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                        &#34;prometheus.io.port&#34;:   &#34;8080&#34;
                     &#125;
                     labels: &#123;
                         app:       &#34;valeter&#34;
$ cp snapshot2 snapshot
</code></pre>

<pre><code>$ cue trim ./frontend/... -s
$ find . | grep kube.cue | xargs wc -l | tail -1
 1046 total
</code></pre>

<pre><code>$ cue eval -c ./... &gt;snapshot2
$ cp snapshot2 snapshot
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;kitchen/kube.cue

deployment: [string]: spec: template: &#123;
	 metadata: annotations: &#34;prometheus.io.scrape&#34;: &#34;true&#34;
	 spec: containers: [&#123;
		  ports: [&#123;
				containerPort: 8080
		  &#125;]
		  livenessProbe: &#123;
				httpGet: &#123;
					 path: &#34;/debug/health&#34;
					 port: 8080
				&#125;
				initialDelaySeconds: 40
				periodSeconds:       3
		  &#125;
	 &#125;]
&#125;
EOF
$ cue fmt ./kitchen
</code></pre>

<pre><code>$ cat &lt;&lt;EOF &gt;&gt;kitchen/kube.cue

deployment: [ID=_]: spec: template: spec: &#123;
	 _hasDisks: *true | bool

	 // field comprehension using just &#34;if&#34;
	 if _hasDisks &#123;
		  volumes: [&#123;
				name: *&#34;\(ID)-disk&#34; | string
				gcePersistentDisk: pdName: *&#34;\(ID)-disk&#34; | string
				gcePersistentDisk: fsType: &#34;ext4&#34;
		  &#125;, &#123;
				name: *&#34;secret-\(ID)&#34; | string
				secret: secretName: *&#34;\(ID)-secrets&#34; | string
		  &#125;, ...]

		  containers: [&#123;
				volumeMounts: [&#123;
					 name:      *&#34;\(ID)-disk&#34; | string
					 mountPath: *&#34;/logs&#34; | string
				&#125;, &#123;
					 mountPath: *&#34;/etc/certs&#34; | string
					 name:      *&#34;secret-\(ID)&#34; | string
					 readOnly:  true
				&#125;, ...]
		  &#125;]
	 &#125;
&#125;
EOF
$ cat &lt;&lt;EOF &gt;&gt;kitchen/souschef/kube.cue

deployment: souschef: spec: template: spec: &#123;
	 _hasDisks: false
&#125;

EOF
$ cue fmt ./kitchen/...
</code></pre>

<pre><code>$ cue trim -s ./kitchen/...
$ cue eval -c ./... &gt;snapshot2
$ diff -wu snapshot snapshot2
--- snapshot	2022-02-22 17:04:45.504056477 +0000
+++ snapshot2	2022-02-22 17:04:47.283976577 +0000
@@ -1091,14 +1091,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;caller&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1132,11 +1132,11 @@
                             name:      &#34;secret-ssh-key&#34;
                             readOnly:  true
                         &#125;]
+                        name: &#34;caller&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
                         args: [&#34;-env=prod&#34;, &#34;-key=/etc/certs/client.key&#34;, &#34;-cert=/etc/certs/client.pem&#34;, &#34;-ca=/etc/certs/servfx.ca&#34;, &#34;-ssh-tunnel-key=/sslcerts/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
-                        name: &#34;caller&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1197,14 +1197,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;dishwasher&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1238,11 +1238,11 @@
                             name:      &#34;secret-ssh-key&#34;
                             readOnly:  true
                         &#125;]
+                        name: &#34;dishwasher&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
                         args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
-                        name: &#34;dishwasher&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1303,14 +1303,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;expiditer&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1327,6 +1327,10 @@
                     &#125;]
                     containers: [&#123;
                         image: &#34;gcr.io/myproj/expiditer:v0.5.34&#34;
+                        name:  &#34;expiditer&#34;
+                        ports: [&#123;
+                            containerPort: 8080
+                        &#125;]
                         volumeMounts: [&#123;
                             name:      &#34;expiditer-disk&#34;
                             mountPath: &#34;/logs&#34;
@@ -1335,11 +1339,7 @@
                             name:      &#34;secret-expiditer&#34;
                             readOnly:  true
                         &#125;]
-                        ports: [&#123;
-                            containerPort: 8080
-                        &#125;]
                         args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
-                        name: &#34;expiditer&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1400,14 +1400,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;headchef&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1432,11 +1432,11 @@
                             name:      &#34;secret-headchef&#34;
                             readOnly:  true
                         &#125;]
+                        name: &#34;headchef&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
                         args: [&#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
-                        name: &#34;headchef&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1497,14 +1497,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;linecook&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1529,11 +1529,11 @@
                             name:      &#34;secret-kitchen&#34;
                             readOnly:  true
                         &#125;]
+                        name: &#34;linecook&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
                         args: [&#34;-name=linecook&#34;, &#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-etcd&#34;, &#34;etcd:2379&#34;, &#34;-reconnect-delay&#34;, &#34;1h&#34;, &#34;-recovery-overlap&#34;, &#34;100000&#34;]
-                        name: &#34;linecook&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1594,14 +1594,14 @@
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;pastrychef&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -1626,11 +1626,11 @@
                             name:      &#34;secret-ssh-key&#34;
                             readOnly:  true
                         &#125;]
+                        name: &#34;pastrychef&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
                         args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-reconnect-delay=1m&#34;, &#34;-etcd=etcd:2379&#34;, &#34;-recovery-overlap=10000&#34;]
-                        name: &#34;pastrychef&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1696,14 +1696,17 @@
                         domain:    &#34;prod&#34;
                         component: &#34;kitchen&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     containers: [&#123;
                         image: &#34;gcr.io/myproj/souschef:v0.5.3&#34;
+                        name:  &#34;souschef&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        name: &#34;souschef&#34;
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
$ cp snapshot2 snapshot
$ find . | grep kube.cue | xargs wc -l | tail -1
  925 total
</code></pre>

```cue
// /workdir/services/kube_tool.cue

package kube

objects: [ for v in objectSets for x in v {x}]

objectSets: [
	service,
	deployment,
	statefulSet,
	daemonSet,
	configMap,
]
```

```cue
// /workdir/services/ls_tool.cue

package kube

import (
	"text/tabwriter"
	"tool/cli"
	"tool/file"
)

command: ls: {
	task: print: cli.Print & {
		text: tabwriter.Write([
			for x in objects {
				"\(x.kind)  \t\(x.metadata.labels.component)  \t\(x.metadata.name)"
			},
		])
	}

	task: write: file.Create & {
		filename: "foo.txt"
		contents: task.print.text
	}
}
```

<pre><code>$ cue cmd ls ./frontend/maitred
Service      frontend   maitred
Deployment   frontend   maitred

</code></pre>

<pre><code>$ cue ls ./frontend/maitred
Service      frontend   maitred
Deployment   frontend   maitred

</code></pre>

<pre><code>$ cue ls ./...
Service       frontend   bartender
Service       frontend   breaddispatcher
Service       frontend   host
Service       frontend   maitred
Service       frontend   valeter
Service       frontend   waiter
Service       frontend   waterdispatcher
Service       infra      download
Service       infra      etcd
Service       infra      events
Service       infra      tasks
Service       infra      updater
Service       infra      watcher
Service       kitchen    caller
Service       kitchen    dishwasher
Service       kitchen    expiditer
Service       kitchen    headchef
Service       kitchen    linecook
Service       kitchen    pastrychef
Service       kitchen    souschef
Service       mon        alertmanager
Service       mon        grafana
Service       mon        node-exporter
Service       mon        prometheus
Service       proxy      authproxy
Service       proxy      goget
Service       proxy      nginx
Deployment    frontend   bartender
Deployment    frontend   breaddispatcher
Deployment    frontend   host
Deployment    frontend   maitred
Deployment    frontend   valeter
Deployment    frontend   waiter
Deployment    frontend   waterdispatcher
Deployment    infra      download
Deployment    infra      events
Deployment    infra      tasks
Deployment    infra      updater
Deployment    infra      watcher
Deployment    kitchen    caller
Deployment    kitchen    dishwasher
Deployment    kitchen    expiditer
Deployment    kitchen    headchef
Deployment    kitchen    linecook
Deployment    kitchen    pastrychef
Deployment    kitchen    souschef
Deployment    mon        alertmanager
Deployment    mon        grafana
Deployment    mon        prometheus
Deployment    proxy      authproxy
Deployment    proxy      goget
Deployment    proxy      nginx
StatefulSet   infra      etcd
DaemonSet     mon        node-exporter
ConfigMap     mon        alertmanager
ConfigMap     mon        prometheus
ConfigMap     proxy      authproxy
ConfigMap     proxy      nginx

</code></pre>

```cue
// /workdir/services/dump_tool.cue

package kube

import (
	"encoding/yaml"
	"tool/cli"
)

command: dump: {
	task: print: cli.Print & {
		text: yaml.MarshalStream(objects)
	}
}
```

```cue
// /workdir/services/create_tool.cue

package kube

import (
	"encoding/yaml"
	"tool/exec"
	"tool/cli"
)

command: create: {
	task: kube: exec.Run & {
		cmd:    "kubectl create --dry-run=client -f -"
		stdin:  yaml.MarshalStream(objects)
		stdout: string
	}

	task: display: cli.Print & {
		text: task.kube.stdout
	}
}
```

<pre><code>$ cue create ./frontend/...
service/bartender created (dry run)
service/breaddispatcher created (dry run)
service/host created (dry run)
service/maitred created (dry run)
service/valeter created (dry run)
service/waiter created (dry run)
service/waterdispatcher created (dry run)
deployment.apps/bartender created (dry run)
deployment.apps/breaddispatcher created (dry run)
deployment.apps/host created (dry run)
deployment.apps/maitred created (dry run)
deployment.apps/valeter created (dry run)
deployment.apps/waiter created (dry run)
deployment.apps/waterdispatcher created (dry run)

</code></pre>

<pre><code>$ go get k8s.io/api/apps/v1@v0.23.4
go get: added github.com/go-logr/logr v1.2.0
go get: added github.com/gogo/protobuf v1.3.2
go get: added github.com/google/go-cmp v0.5.5
go get: added github.com/google/gofuzz v1.1.0
go get: added github.com/json-iterator/go v1.1.12
go get: added github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd
go get: added github.com/modern-go/reflect2 v1.0.2
go get: added golang.org/x/net v0.0.0-20211209124913-491a49abca63
go get: added golang.org/x/text v0.3.7
go get: added gopkg.in/inf.v0 v0.9.1
go get: added gopkg.in/yaml.v2 v2.4.0
go get: added k8s.io/api v0.23.4
go get: added k8s.io/apimachinery v0.23.4
go get: added k8s.io/klog/v2 v2.30.0
go get: added k8s.io/utils v0.0.0-20211116205334-6203023598ed
go get: added sigs.k8s.io/json v0.0.0-20211020170558-c049b76a60c6
go get: added sigs.k8s.io/structured-merge-diff/v4 v4.2.1
$ cue get go k8s.io/api/apps/v1
</code></pre>

```cue
// /workdir/services/k8s_defs.cue

package kube

import (
	"k8s.io/api/core/v1"
	apps_v1 "k8s.io/api/apps/v1"
)

service: [string]:     v1.#Service
deployment: [string]:  apps_v1.#Deployment
daemonSet: [string]:   apps_v1.#DaemonSet
statefulSet: [string]: apps_v1.#StatefulSet
```

<pre><code>$ cue fmt
</code></pre>

<pre><code>$ cue trim -s ./
$ cue eval -c ./... &gt;snapshot2
$ diff -wu snapshot snapshot2
--- snapshot	2022-02-22 17:04:47.287976398 +0000
+++ snapshot2	2022-02-22 17:05:01.079357311 +0000
@@ -12,21 +12,11 @@
 // ---
 service: &#123;
     bartender: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;bartender&#34;
-            labels: &#123;
-                app:       &#34;bartender&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -35,12 +25,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;bartender&#34;
+            labels: &#123;
+                app:       &#34;bartender&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     bartender: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -58,12 +56,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/bartender:v0.1.34&#34;
                         name:  &#34;bartender&#34;
+                        image: &#34;gcr.io/myproj/bartender:v0.1.34&#34;
+                        args: []
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
-                        args: []
                     &#125;]
                 &#125;
             &#125;
@@ -74,6 +72,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -82,21 +82,11 @@
 // ---
 service: &#123;
     breaddispatcher: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;breaddispatcher&#34;
-            labels: &#123;
-                app:       &#34;breaddispatcher&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -105,12 +95,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;breaddispatcher&#34;
+            labels: &#123;
+                app:       &#34;breaddispatcher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     breaddispatcher: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -128,12 +126,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/breaddispatcher:v0.3.24&#34;
                         name:  &#34;breaddispatcher&#34;
+                        image: &#34;gcr.io/myproj/breaddispatcher:v0.3.24&#34;
+                        args: [&#34;-etcd=etcd:2379&#34;, &#34;-event-server=events:7788&#34;]
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
-                        args: [&#34;-etcd=etcd:2379&#34;, &#34;-event-server=events:7788&#34;]
                     &#125;]
                 &#125;
             &#125;
@@ -144,6 +142,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -152,21 +152,11 @@
 // ---
 service: &#123;
     host: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;host&#34;
-            labels: &#123;
-                app:       &#34;host&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -175,12 +165,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;host&#34;
+            labels: &#123;
+                app:       &#34;host&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     host: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 2
             selector: &#123;&#125;
@@ -198,12 +196,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/host:v0.1.10&#34;
                         name:  &#34;host&#34;
+                        image: &#34;gcr.io/myproj/host:v0.1.10&#34;
+                        args: []
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
-                        args: []
                     &#125;]
                 &#125;
             &#125;
@@ -214,6 +212,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -222,21 +222,11 @@
 // ---
 service: &#123;
     maitred: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;maitred&#34;
-            labels: &#123;
-                app:       &#34;maitred&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -245,12 +235,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;maitred&#34;
+            labels: &#123;
+                app:       &#34;maitred&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     maitred: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -268,12 +266,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/maitred:v0.0.4&#34;
                         name:  &#34;maitred&#34;
+                        image: &#34;gcr.io/myproj/maitred:v0.0.4&#34;
+                        args: []
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
-                        args: []
                     &#125;]
                 &#125;
             &#125;
@@ -284,6 +282,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -292,21 +292,11 @@
 // ---
 service: &#123;
     valeter: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;valeter&#34;
-            labels: &#123;
-                app:       &#34;valeter&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
+                name:       &#34;http&#34;
                 port:       8080
                 protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
                 targetPort: 8080
             &#125;]
             selector: &#123;
@@ -315,12 +305,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;valeter&#34;
+            labels: &#123;
+                app:       &#34;valeter&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     valeter: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -338,11 +336,11 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
+                        name:  &#34;valeter&#34;
                         image: &#34;gcr.io/myproj/valeter:v0.0.4&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        name: &#34;valeter&#34;
                         args: [&#34;-http=:8080&#34;, &#34;-etcd=etcd:2379&#34;]
                     &#125;]
                 &#125;
@@ -354,6 +352,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -362,21 +362,11 @@
 // ---
 service: &#123;
     waiter: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;waiter&#34;
-            labels: &#123;
-                app:       &#34;waiter&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -385,12 +375,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;waiter&#34;
+            labels: &#123;
+                app:       &#34;waiter&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     waiter: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 5
             selector: &#123;&#125;
@@ -408,8 +406,8 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/waiter:v0.3.0&#34;
                         name:  &#34;waiter&#34;
+                        image: &#34;gcr.io/myproj/waiter:v0.3.0&#34;
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
@@ -423,6 +421,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -431,21 +431,11 @@
 // ---
 service: &#123;
     waterdispatcher: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;waterdispatcher&#34;
-            labels: &#123;
-                app:       &#34;waterdispatcher&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;frontend&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
+                name:       &#34;http&#34;
                 port:       7080
                 protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
                 targetPort: 7080
             &#125;]
             selector: &#123;
@@ -454,12 +444,20 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;waterdispatcher&#34;
+            labels: &#123;
+                app:       &#34;waterdispatcher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;frontend&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     waterdispatcher: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -477,12 +475,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/waterdispatcher:v0.0.48&#34;
                         name:  &#34;waterdispatcher&#34;
+                        image: &#34;gcr.io/myproj/waterdispatcher:v0.0.48&#34;
+                        args: [&#34;-http=:8080&#34;, &#34;-etcd=etcd:2379&#34;]
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
-                        args: [&#34;-http=:8080&#34;, &#34;-etcd=etcd:2379&#34;]
                     &#125;]
                 &#125;
             &#125;
@@ -493,6 +491,8 @@
                 component: &#34;frontend&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -507,21 +507,11 @@
 // ---
 service: &#123;
     download: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;download&#34;
-            labels: &#123;
-                app:       &#34;download&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       7080
-                protocol:   &#34;TCP&#34;
                 targetPort: 7080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -530,12 +520,20 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;download&#34;
+            labels: &#123;
+                app:       &#34;download&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     download: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -549,8 +547,8 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/download:v0.0.2&#34;
                         name:  &#34;download&#34;
+                        image: &#34;gcr.io/myproj/download:v0.0.2&#34;
                         ports: [&#123;
                             containerPort: 7080
                         &#125;]
@@ -564,6 +562,8 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -572,27 +572,17 @@
 // ---
 service: &#123;
     etcd: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;etcd&#34;
-            labels: &#123;
-                app:       &#34;etcd&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             clusterIP: &#34;None&#34;
             ports: [&#123;
                 port:       2379
-                protocol:   &#34;TCP&#34;
                 targetPort: 2379
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;, &#123;
+                name:       &#34;peer&#34;
                 port:       2380
                 protocol:   &#34;TCP&#34;
-                name:       &#34;peer&#34;
                 targetPort: 2380
             &#125;]
             selector: &#123;
@@ -601,28 +591,37 @@
                 domain:    &#34;prod&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;etcd&#34;
+            labels: &#123;
+                app:       &#34;etcd&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;&#125;
 daemonSet: &#123;&#125;
 statefulSet: &#123;
     etcd: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;StatefulSet&#34;
         spec: &#123;
             serviceName: &#34;etcd&#34;
             replicas:    3
+            selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                        &#34;prometheus.io.port&#34;:   &#34;2379&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;etcd&#34;
                         component: &#34;infra&#34;
                         domain:    &#34;prod&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                        &#34;prometheus.io.port&#34;:   &#34;2379&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     affinity: &#123;
@@ -641,6 +640,7 @@
                     &#125;
                     terminationGracePeriodSeconds: 10
                     containers: [&#123;
+                        name:  &#34;etcd&#34;
                         image: &#34;quay.io/coreos/etcd:v3.3.10&#34;
                         ports: [&#123;
                             name:          &#34;client&#34;
@@ -682,12 +682,10 @@
                             &#125;
                         &#125;]
                         command: [&#34;/usr/local/bin/etcd&#34;]
-                        name: &#34;etcd&#34;
                         args: [&#34;-name&#34;, &#34;$(NAME)&#34;, &#34;-data-dir&#34;, &#34;/data/etcd3&#34;, &#34;-initial-advertise-peer-urls&#34;, &#34;http://$(IP):2380&#34;, &#34;-listen-peer-urls&#34;, &#34;http://$(IP):2380&#34;, &#34;-listen-client-urls&#34;, &#34;http://$(IP):2379,http://127.0.0.1:2379&#34;, &#34;-advertise-client-urls&#34;, &#34;http://$(IP):2379&#34;, &#34;-discovery&#34;, &#34;https://discovery.etcd.io/xxxxxx&#34;]
                     &#125;]
                 &#125;
             &#125;
-            selector: &#123;&#125;
             volumeClaimTemplates: [&#123;
                 metadata: &#123;
                     name: &#34;etcd3&#34;
@@ -711,27 +709,19 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;StatefulSet&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 configMap: &#123;&#125;
 // ---
 service: &#123;
     events: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;events&#34;
-            labels: &#123;
-                app:       &#34;events&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
+                name:       &#34;grpc&#34;
                 port:       7788
                 protocol:   &#34;TCP&#34;
-                name:       &#34;grpc&#34;
                 targetPort: 7788
             &#125;]
             selector: &#123;
@@ -740,26 +730,34 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;events&#34;
+            labels: &#123;
+                app:       &#34;events&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     events: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 2
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                        &#34;prometheus.io.port&#34;:   &#34;7080&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;events&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;infra&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                        &#34;prometheus.io.port&#34;:   &#34;7080&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     affinity: &#123;
@@ -783,6 +781,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;events&#34;
                         image: &#34;gcr.io/myproj/events:v0.1.31&#34;
                         ports: [&#123;
                             containerPort: 7080
@@ -790,7 +789,6 @@
                             containerPort: 7788
                         &#125;]
                         args: [&#34;-cert=/etc/ssl/server.pem&#34;, &#34;-key=/etc/ssl/server.key&#34;, &#34;-grpc=:7788&#34;]
-                        name: &#34;events&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/ssl&#34;
                             name:      &#34;secret-volume&#34;
@@ -805,6 +803,8 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -813,23 +813,13 @@
 // ---
 service: &#123;
     tasks: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;tasks&#34;
-            labels: &#123;
-                app:       &#34;tasks&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             type:           &#34;LoadBalancer&#34;
             loadBalancerIP: &#34;1.2.3.4&#34;
             ports: [&#123;
                 port:       443
-                protocol:   &#34;TCP&#34;
                 name:       &#34;http&#34;
+                protocol:   &#34;TCP&#34;
                 targetPort: 7443
             &#125;]
             selector: &#123;
@@ -838,26 +828,34 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;tasks&#34;
+            labels: &#123;
+                app:       &#34;tasks&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     tasks: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
-                    annotations: &#123;
-                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
-                        &#34;prometheus.io.port&#34;:   &#34;7080&#34;
-                    &#125;
                     labels: &#123;
                         app:       &#34;tasks&#34;
                         domain:    &#34;prod&#34;
                         component: &#34;infra&#34;
                     &#125;
+                    annotations: &#123;
+                        &#34;prometheus.io.scrape&#34;: &#34;true&#34;
+                        &#34;prometheus.io.port&#34;:   &#34;7080&#34;
+                    &#125;
                 &#125;
                 spec: &#123;
                     volumes: [&#123;
@@ -867,13 +865,13 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;tasks&#34;
                         image: &#34;gcr.io/myproj/tasks:v0.2.6&#34;
                         ports: [&#123;
                             containerPort: 7080
                         &#125;, &#123;
                             containerPort: 7443
                         &#125;]
-                        name: &#34;tasks&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/ssl&#34;
                             name:      &#34;secret-volume&#34;
@@ -888,6 +886,8 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -896,21 +896,11 @@
 // ---
 service: &#123;
     updater: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;updater&#34;
-            labels: &#123;
-                app:       &#34;updater&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -919,12 +909,20 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;updater&#34;
+            labels: &#123;
+                app:       &#34;updater&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     updater: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -944,6 +942,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;updater&#34;
                         image: &#34;gcr.io/myproj/updater:v0.1.0&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/certs&#34;
@@ -952,7 +951,6 @@
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        name: &#34;updater&#34;
                         args: [&#34;-key=/etc/certs/updater.pem&#34;]
                     &#125;]
                 &#125;
@@ -964,6 +962,8 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -972,23 +972,13 @@
 // ---
 service: &#123;
     watcher: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;watcher&#34;
-            labels: &#123;
-                app:       &#34;watcher&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;infra&#34;
-            &#125;
-        &#125;
         spec: &#123;
             type:           &#34;LoadBalancer&#34;
             loadBalancerIP: &#34;1.2.3.4.&#34;
             ports: [&#123;
+                name:       &#34;http&#34;
                 port:       7788
                 protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
                 targetPort: 7788
             &#125;]
             selector: &#123;
@@ -997,12 +987,20 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;watcher&#34;
+            labels: &#123;
+                app:       &#34;watcher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;infra&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     watcher: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1022,13 +1020,13 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;watcher&#34;
                         image: &#34;gcr.io/myproj/watcher:v0.1.0&#34;
                         ports: [&#123;
                             containerPort: 7080
                         &#125;, &#123;
                             containerPort: 7788
                         &#125;]
-                        name: &#34;watcher&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/ssl&#34;
                             name:      &#34;secret-volume&#34;
@@ -1043,6 +1041,8 @@
                 component: &#34;infra&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1057,21 +1057,11 @@
 // ---
 service: &#123;
     caller: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;caller&#34;
-            labels: &#123;
-                app:       &#34;caller&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1080,12 +1070,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;caller&#34;
+            labels: &#123;
+                app:       &#34;caller&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     caller: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 3
             selector: &#123;&#125;
@@ -1119,6 +1117,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;caller&#34;
                         image: &#34;gcr.io/myproj/caller:v0.20.14&#34;
                         volumeMounts: [&#123;
                             name:      &#34;ssd-caller&#34;
@@ -1132,11 +1131,10 @@
                             name:      &#34;secret-ssh-key&#34;
                             readOnly:  true
                         &#125;]
-                        name: &#34;caller&#34;
+                        args: [&#34;-env=prod&#34;, &#34;-key=/etc/certs/client.key&#34;, &#34;-cert=/etc/certs/client.pem&#34;, &#34;-ca=/etc/certs/servfx.ca&#34;, &#34;-ssh-tunnel-key=/sslcerts/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        args: [&#34;-env=prod&#34;, &#34;-key=/etc/certs/client.key&#34;, &#34;-cert=/etc/certs/client.pem&#34;, &#34;-ca=/etc/certs/servfx.ca&#34;, &#34;-ssh-tunnel-key=/sslcerts/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1155,6 +1153,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1163,21 +1163,11 @@
 // ---
 service: &#123;
     dishwasher: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;dishwasher&#34;
-            labels: &#123;
-                app:       &#34;dishwasher&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1186,12 +1176,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;dishwasher&#34;
+            labels: &#123;
+                app:       &#34;dishwasher&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     dishwasher: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 5
             selector: &#123;&#125;
@@ -1225,6 +1223,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;dishwasher&#34;
                         image: &#34;gcr.io/myproj/dishwasher:v0.2.13&#34;
                         volumeMounts: [&#123;
                             name:      &#34;dishwasher-disk&#34;
@@ -1238,11 +1237,10 @@
                             name:      &#34;secret-ssh-key&#34;
                             readOnly:  true
                         &#125;]
-                        name: &#34;dishwasher&#34;
+                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1261,6 +1259,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1269,21 +1269,11 @@
 // ---
 service: &#123;
     expiditer: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;expiditer&#34;
-            labels: &#123;
-                app:       &#34;expiditer&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1292,12 +1282,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;expiditer&#34;
+            labels: &#123;
+                app:       &#34;expiditer&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     expiditer: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1326,8 +1324,9 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/expiditer:v0.5.34&#34;
                         name:  &#34;expiditer&#34;
+                        image: &#34;gcr.io/myproj/expiditer:v0.5.34&#34;
+                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
@@ -1339,7 +1338,6 @@
                             name:      &#34;secret-expiditer&#34;
                             readOnly:  true
                         &#125;]
-                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1358,6 +1356,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1366,21 +1366,11 @@
 // ---
 service: &#123;
     headchef: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;headchef&#34;
-            labels: &#123;
-                app:       &#34;headchef&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1389,12 +1379,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;headchef&#34;
+            labels: &#123;
+                app:       &#34;headchef&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     headchef: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1423,6 +1421,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;headchef&#34;
                         image: &#34;gcr.io/myproj/headchef:v0.2.16&#34;
                         volumeMounts: [&#123;
                             name:      &#34;headchef-disk&#34;
@@ -1432,11 +1431,10 @@
                             name:      &#34;secret-headchef&#34;
                             readOnly:  true
                         &#125;]
-                        name: &#34;headchef&#34;
+                        args: [&#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        args: [&#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1455,6 +1453,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1463,21 +1463,11 @@
 // ---
 service: &#123;
     linecook: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;linecook&#34;
-            labels: &#123;
-                app:       &#34;linecook&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1486,12 +1476,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;linecook&#34;
+            labels: &#123;
+                app:       &#34;linecook&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     linecook: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1520,20 +1518,20 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;linecook&#34;
                         image: &#34;gcr.io/myproj/linecook:v0.1.42&#34;
                         volumeMounts: [&#123;
                             name:      &#34;linecook-disk&#34;
                             mountPath: &#34;/logs&#34;
                         &#125;, &#123;
-                            mountPath: &#34;/etc/certs&#34;
                             name:      &#34;secret-kitchen&#34;
+                            mountPath: &#34;/etc/certs&#34;
                             readOnly:  true
                         &#125;]
-                        name: &#34;linecook&#34;
+                        args: [&#34;-name=linecook&#34;, &#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-etcd&#34;, &#34;etcd:2379&#34;, &#34;-reconnect-delay&#34;, &#34;1h&#34;, &#34;-recovery-overlap&#34;, &#34;100000&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        args: [&#34;-name=linecook&#34;, &#34;-env=prod&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-etcd&#34;, &#34;etcd:2379&#34;, &#34;-reconnect-delay&#34;, &#34;1h&#34;, &#34;-recovery-overlap&#34;, &#34;100000&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1552,6 +1550,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1560,21 +1560,11 @@
 // ---
 service: &#123;
     pastrychef: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;pastrychef&#34;
-            labels: &#123;
-                app:       &#34;pastrychef&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1583,12 +1573,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;pastrychef&#34;
+            labels: &#123;
+                app:       &#34;pastrychef&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     pastrychef: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1617,20 +1615,20 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;pastrychef&#34;
                         image: &#34;gcr.io/myproj/pastrychef:v0.1.15&#34;
                         volumeMounts: [&#123;
                             name:      &#34;pastrychef-disk&#34;
                             mountPath: &#34;/logs&#34;
                         &#125;, &#123;
-                            mountPath: &#34;/etc/certs&#34;
                             name:      &#34;secret-ssh-key&#34;
+                            mountPath: &#34;/etc/certs&#34;
                             readOnly:  true
                         &#125;]
-                        name: &#34;pastrychef&#34;
+                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-reconnect-delay=1m&#34;, &#34;-etcd=etcd:2379&#34;, &#34;-recovery-overlap=10000&#34;]
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
-                        args: [&#34;-env=prod&#34;, &#34;-ssh-tunnel-key=/etc/certs/tunnel-private.pem&#34;, &#34;-logdir=/logs&#34;, &#34;-event-server=events:7788&#34;, &#34;-reconnect-delay=1m&#34;, &#34;-etcd=etcd:2379&#34;, &#34;-recovery-overlap=10000&#34;]
                         livenessProbe: &#123;
                             httpGet: &#123;
                                 path: &#34;/debug/health&#34;
@@ -1649,6 +1647,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1657,21 +1657,11 @@
 // ---
 service: &#123;
     souschef: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;souschef&#34;
-            labels: &#123;
-                app:       &#34;souschef&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;kitchen&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       8080
-                protocol:   &#34;TCP&#34;
                 targetPort: 8080
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -1680,12 +1670,20 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;souschef&#34;
+            labels: &#123;
+                app:       &#34;souschef&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;kitchen&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     souschef: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -1702,8 +1700,8 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
-                        image: &#34;gcr.io/myproj/souschef:v0.5.3&#34;
                         name:  &#34;souschef&#34;
+                        image: &#34;gcr.io/myproj/souschef:v0.5.3&#34;
                         ports: [&#123;
                             containerPort: 8080
                         &#125;]
@@ -1725,6 +1723,8 @@
                 component: &#34;kitchen&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1739,14 +1739,12 @@
 // ---
 service: &#123;
     alertmanager: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
         metadata: &#123;
+            name: &#34;alertmanager&#34;
             annotations: &#123;
                 &#34;prometheus.io/scrape&#34;: &#34;true&#34;
                 &#34;prometheus.io/path&#34;:   &#34;/metrics&#34;
             &#125;
-            name: &#34;alertmanager&#34;
             labels: &#123;
                 app:       &#34;alertmanager&#34;
                 domain:    &#34;prod&#34;
@@ -1755,9 +1753,9 @@
         &#125;
         spec: &#123;
             ports: [&#123;
+                name:       &#34;main&#34;
                 port:       9093
                 protocol:   &#34;TCP&#34;
-                name:       &#34;main&#34;
                 targetPort: 9093
             &#125;]
             selector: &#123;
@@ -1766,19 +1764,19 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     alertmanager: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
+            replicas: 1
             selector: &#123;
                 matchLabels: &#123;
                     app: &#34;alertmanager&#34;
                 &#125;
             &#125;
-            replicas: 1
             template: &#123;
                 metadata: &#123;
                     name: &#34;alertmanager&#34;
@@ -1790,13 +1788,13 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
+                        name:  &#34;alertmanager&#34;
                         image: &#34;prom/alertmanager:v0.15.2&#34;
                         args: [&#34;--config.file=/etc/alertmanager/alerts.yaml&#34;, &#34;--storage.path=/alertmanager&#34;, &#34;--web.external-url=https://alertmanager.example.com&#34;]
                         ports: [&#123;
                             name:          &#34;alertmanager&#34;
                             containerPort: 9093
                         &#125;]
-                        name: &#34;alertmanager&#34;
                         volumeMounts: [&#123;
                             name:      &#34;config-volume&#34;
                             mountPath: &#34;/etc/alertmanager&#34;
@@ -1823,6 +1821,8 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1860,16 +1860,6 @@
 // ---
 service: &#123;
     grafana: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;grafana&#34;
-            labels: &#123;
-                app:       &#34;grafana&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;mon&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 name:       &#34;grafana&#34;
@@ -1883,18 +1873,26 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;grafana&#34;
+            labels: &#123;
+                app:       &#34;grafana&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;mon&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     grafana: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         metadata: &#123;
+            name: &#34;grafana&#34;
             labels: &#123;
                 app:       &#34;grafana&#34;
                 component: &#34;mon&#34;
             &#125;
-            name: &#34;grafana&#34;
         &#125;
         spec: &#123;
             replicas: 1
@@ -1916,6 +1914,7 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;grafana&#34;
                         image: &#34;grafana/grafana:4.5.2&#34;
                         ports: [&#123;
                             containerPort: 8080
@@ -1940,7 +1939,6 @@
                             name:  &#34;GF_AUTH_ANONYMOUS_ORG_ROLE&#34;
                             value: &#34;admin&#34;
                         &#125;]
-                        name: &#34;grafana&#34;
                         volumeMounts: [&#123;
                             name:      &#34;grafana-volume&#34;
                             mountPath: &#34;/var/lib/grafana&#34;
@@ -1949,6 +1947,8 @@
                 &#125;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -1957,13 +1957,11 @@
 // ---
 service: &#123;
     &#34;node-exporter&#34;: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
         metadata: &#123;
+            name: &#34;node-exporter&#34;
             annotations: &#123;
                 &#34;prometheus.io/scrape&#34;: &#34;true&#34;
             &#125;
-            name: &#34;node-exporter&#34;
             labels: &#123;
                 app:       &#34;node-exporter&#34;
                 domain:    &#34;prod&#34;
@@ -1974,9 +1972,9 @@
             type:      &#34;ClusterIP&#34;
             clusterIP: &#34;None&#34;
             ports: [&#123;
+                name:       &#34;metrics&#34;
                 port:       9100
                 protocol:   &#34;TCP&#34;
-                name:       &#34;metrics&#34;
                 targetPort: 9100
             &#125;]
             selector: &#123;
@@ -1985,14 +1983,15 @@
                 domain:    &#34;prod&#34;
             &#125;
         &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;&#125;
 daemonSet: &#123;
     &#34;node-exporter&#34;: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;DaemonSet&#34;
         spec: &#123;
+            selector: &#123;&#125;
             template: &#123;
                 metadata: &#123;
                     name: &#34;node-exporter&#34;
@@ -2006,6 +2005,7 @@
                     hostNetwork: true
                     hostPID:     true
                     containers: [&#123;
+                        name:  &#34;node-exporter&#34;
                         image: &#34;quay.io/prometheus/node-exporter:v0.16.0&#34;
                         args: [&#34;--path.procfs=/host/proc&#34;, &#34;--path.sysfs=/host/sys&#34;]
                         ports: [&#123;
@@ -2023,7 +2023,6 @@
                                 cpu:    &#34;200m&#34;
                             &#125;
                         &#125;
-                        name: &#34;node-exporter&#34;
                         volumeMounts: [&#123;
                             name:      &#34;proc&#34;
                             readOnly:  true
@@ -2047,7 +2046,6 @@
                     &#125;]
                 &#125;
             &#125;
-            selector: &#123;&#125;
         &#125;
         metadata: &#123;
             name: &#34;node-exporter&#34;
@@ -2055,6 +2053,8 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        kind:       &#34;DaemonSet&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 statefulSet: &#123;&#125;
@@ -2062,13 +2062,11 @@
 // ---
 service: &#123;
     prometheus: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
         metadata: &#123;
+            name: &#34;prometheus&#34;
             annotations: &#123;
                 &#34;prometheus.io/scrape&#34;: &#34;true&#34;
             &#125;
-            name: &#34;prometheus&#34;
             labels: &#123;
                 app:       &#34;prometheus&#34;
                 domain:    &#34;prod&#34;
@@ -2078,10 +2076,10 @@
         spec: &#123;
             type: &#34;NodePort&#34;
             ports: [&#123;
-                port:       9090
-                protocol:   &#34;TCP&#34;
                 name:       &#34;main&#34;
                 nodePort:   30900
+                port:       9090
+                protocol:   &#34;TCP&#34;
                 targetPort: 9090
             &#125;]
             selector: &#123;
@@ -2090,13 +2088,14 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     prometheus: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
+            replicas: 1
             strategy: &#123;
                 rollingUpdate: &#123;
                     maxSurge:       0
@@ -2109,7 +2108,6 @@
                     app: &#34;prometheus&#34;
                 &#125;
             &#125;
-            replicas: 1
             template: &#123;
                 metadata: &#123;
                     name: &#34;prometheus&#34;
@@ -2124,13 +2122,13 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
+                        name:  &#34;prometheus&#34;
                         image: &#34;prom/prometheus:v2.4.3&#34;
                         args: [&#34;--config.file=/etc/prometheus/prometheus.yml&#34;, &#34;--web.external-url=https://prometheus.example.com&#34;]
                         ports: [&#123;
                             name:          &#34;web&#34;
                             containerPort: 9090
                         &#125;]
-                        name: &#34;prometheus&#34;
                         volumeMounts: [&#123;
                             name:      &#34;config-volume&#34;
                             mountPath: &#34;/etc/prometheus&#34;
@@ -2151,6 +2149,8 @@
                 component: &#34;mon&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -2402,21 +2402,11 @@
 // ---
 service: &#123;
     authproxy: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;authproxy&#34;
-            labels: &#123;
-                app:       &#34;authproxy&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;proxy&#34;
-            &#125;
-        &#125;
         spec: &#123;
             ports: [&#123;
                 port:       4180
-                protocol:   &#34;TCP&#34;
                 targetPort: 4180
+                protocol:   &#34;TCP&#34;
                 name:       &#34;client&#34;
             &#125;]
             selector: &#123;
@@ -2425,12 +2415,20 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;authproxy&#34;
+            labels: &#123;
+                app:       &#34;authproxy&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     authproxy: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -2444,12 +2442,12 @@
                 &#125;
                 spec: &#123;
                     containers: [&#123;
+                        name:  &#34;authproxy&#34;
                         image: &#34;skippy/oauth2_proxy:2.0.1&#34;
                         ports: [&#123;
                             containerPort: 4180
                         &#125;]
                         args: [&#34;--config=/etc/authproxy/authproxy.cfg&#34;]
-                        name: &#34;authproxy&#34;
                         volumeMounts: [&#123;
                             name:      &#34;config-volume&#34;
                             mountPath: &#34;/etc/authproxy&#34;
@@ -2470,6 +2468,8 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -2544,23 +2544,13 @@
 // ---
 service: &#123;
     goget: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;goget&#34;
-            labels: &#123;
-                app:       &#34;goget&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;proxy&#34;
-            &#125;
-        &#125;
         spec: &#123;
             type:           &#34;LoadBalancer&#34;
             loadBalancerIP: &#34;1.3.5.7&#34;
             ports: [&#123;
                 port:       443
-                protocol:   &#34;TCP&#34;
                 name:       &#34;https&#34;
+                protocol:   &#34;TCP&#34;
                 targetPort: 7443
             &#125;]
             selector: &#123;
@@ -2569,12 +2559,20 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;goget&#34;
+            labels: &#123;
+                app:       &#34;goget&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     goget: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -2594,11 +2592,11 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;goget&#34;
                         image: &#34;gcr.io/myproj/goget:v0.5.1&#34;
                         ports: [&#123;
                             containerPort: 7443
                         &#125;]
-                        name: &#34;goget&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/ssl&#34;
                             name:      &#34;secret-volume&#34;
@@ -2613,6 +2611,8 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
@@ -2621,28 +2621,18 @@
 // ---
 service: &#123;
     nginx: &#123;
-        apiVersion: &#34;v1&#34;
-        kind:       &#34;Service&#34;
-        metadata: &#123;
-            name: &#34;nginx&#34;
-            labels: &#123;
-                app:       &#34;nginx&#34;
-                domain:    &#34;prod&#34;
-                component: &#34;proxy&#34;
-            &#125;
-        &#125;
         spec: &#123;
             type:           &#34;LoadBalancer&#34;
             loadBalancerIP: &#34;1.3.4.5&#34;
             ports: [&#123;
+                name:       &#34;http&#34;
                 port:       80
                 protocol:   &#34;TCP&#34;
-                name:       &#34;http&#34;
                 targetPort: 80
             &#125;, &#123;
+                name:       &#34;https&#34;
                 port:       443
                 protocol:   &#34;TCP&#34;
-                name:       &#34;https&#34;
                 targetPort: 443
             &#125;]
             selector: &#123;
@@ -2651,12 +2641,20 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        metadata: &#123;
+            name: &#34;nginx&#34;
+            labels: &#123;
+                app:       &#34;nginx&#34;
+                domain:    &#34;prod&#34;
+                component: &#34;proxy&#34;
+            &#125;
+        &#125;
+        kind:       &#34;Service&#34;
+        apiVersion: &#34;v1&#34;
     &#125;
 &#125;
 deployment: &#123;
     nginx: &#123;
-        apiVersion: &#34;apps/v1&#34;
-        kind:       &#34;Deployment&#34;
         spec: &#123;
             replicas: 1
             selector: &#123;&#125;
@@ -2681,13 +2679,13 @@
                         &#125;
                     &#125;]
                     containers: [&#123;
+                        name:  &#34;nginx&#34;
                         image: &#34;nginx:1.11.10-alpine&#34;
                         ports: [&#123;
                             containerPort: 80
                         &#125;, &#123;
                             containerPort: 443
                         &#125;]
-                        name: &#34;nginx&#34;
                         volumeMounts: [&#123;
                             mountPath: &#34;/etc/ssl&#34;
                             name:      &#34;secret-volume&#34;
@@ -2706,6 +2704,8 @@
                 component: &#34;proxy&#34;
             &#125;
         &#125;
+        kind:       &#34;Deployment&#34;
+        apiVersion: &#34;apps/v1&#34;
     &#125;
 &#125;
 daemonSet: &#123;&#125;
$ cp snapshot2 snapshot
$ find . | grep kube.cue | xargs wc -l | tail -1
  925 total
</code></pre>
